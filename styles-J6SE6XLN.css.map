{
  "version": 3,
  "sources": ["node_modules/@fontsource/lato/400.css", "node_modules/@fontsource/lato/700.css", "packages/ide/src/styles.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_animated-icon.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_checkmark.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_error.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_hot-toast.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_indicator.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_info.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_loader.scss", "node_modules/@ngxpert/hot-toast/src/styles/components/_warning.scss", "node_modules/@angular/material/core/ripple/_ripple.scss", "node_modules/@angular/cdk/a11y/_index.scss", "node_modules/@angular/cdk/overlay/_index.scss", "node_modules/@angular/cdk/text-field/_index.scss", "node_modules/@angular/material/core/focus-indicators/_private.scss", "node_modules/@angular/material/core/style/_layout-common.scss", "node_modules/@angular/material/core/_core.scss", "node_modules/@angular/material/core/tokens/_token-utils.scss", "node_modules/@angular/material/core/_core-theme.scss", "node_modules/@angular/material/core/style/_sass-utils.scss", "node_modules/@angular/material/core/option/_option-theme.scss", "node_modules/@angular/material/core/selection/pseudo-checkbox/_pseudo-checkbox-theme.scss", "node_modules/@angular/material/progress-bar/_progress-bar-theme.scss", "node_modules/@angular/material/form-field/_form-field-theme.scss", "node_modules/@angular/material/select/_select-theme.scss", "node_modules/@angular/material/chips/_chips-theme.scss", "node_modules/@angular/material/slide-toggle/_slide-toggle-theme.scss", "node_modules/@angular/material/radio/_radio-theme.scss", "node_modules/@angular/material/slider/_slider-theme.scss", "node_modules/@angular/material/list/_list-theme.scss", "node_modules/@angular/material/tabs/_tabs-theme.scss", "node_modules/@angular/material/checkbox/_checkbox-theme.scss", "node_modules/@angular/material/button/_button-theme.scss", "node_modules/@angular/material/button/_icon-button-theme.scss", "node_modules/@angular/material/button/_fab-theme.scss", "node_modules/@angular/material/progress-spinner/_progress-spinner-theme.scss", "node_modules/@angular/material/badge/_badge-theme.scss", "node_modules/@angular/material/datepicker/_datepicker-theme.scss", "node_modules/@angular/material/icon/_icon-theme.scss", "node_modules/@angular/material/stepper/_stepper-theme.scss", "node_modules/@angular/material/toolbar/_toolbar-theme.scss", "packages/ide/src/variables.scss"],
  "sourcesContent": ["/* lato-latin-ext-400-normal */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(./files/lato-latin-ext-400-normal.woff2) format('woff2'), url(./files/lato-latin-ext-400-normal.woff) format('woff');\n  unicode-range: U+0100-02AF,U+0304,U+0308,U+0329,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n\n/* lato-latin-400-normal */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 400;\n  src: url(./files/lato-latin-400-normal.woff2) format('woff2'), url(./files/lato-latin-400-normal.woff) format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}", "/* lato-latin-ext-700-normal */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(./files/lato-latin-ext-700-normal.woff2) format('woff2'), url(./files/lato-latin-ext-700-normal.woff) format('woff');\n  unicode-range: U+0100-02AF,U+0304,U+0308,U+0329,U+1E00-1E9F,U+1EF2-1EFF,U+2020,U+20A0-20AB,U+20AD-20C0,U+2113,U+2C60-2C7F,U+A720-A7FF;\n}\n\n/* lato-latin-700-normal */\n@font-face {\n  font-family: 'Lato';\n  font-style: normal;\n  font-display: swap;\n  font-weight: 700;\n  src: url(./files/lato-latin-700-normal.woff2) format('woff2'), url(./files/lato-latin-700-normal.woff) format('woff');\n  unicode-range: U+0000-00FF,U+0131,U+0152-0153,U+02BB-02BC,U+02C6,U+02DA,U+02DC,U+0304,U+0308,U+0329,U+2000-206F,U+2074,U+20AC,U+2122,U+2191,U+2193,U+2212,U+2215,U+FEFF,U+FFFD;\n}", "// Custom Theming for Angular Material\n// For more information: https://material.angular.io/guide/theming\n@use \"@angular/material\" as mat;\n@use \"@ngxpert/hot-toast/src/styles/styles.scss\";\n// Plus imports for other components in your app.\n\n// Include the common styles for Angular Material. We include this here so that you only\n// have to load a single css file for Angular Material in your app.\n// Be sure that you only ever include this mixin once!\n@include mat.core();\n\n$md-webstudio: (\n  50: #fff8e0,\n  100: #ffedb3,\n  200: #ffe180,\n  300: #ffd44d,\n  400: #ffcb26,\n  500: #ffc200,\n  600: #ffbc00,\n  700: #ffb400,\n  800: #ffac00,\n  900: #ff9f00,\n  A100: #ffffff,\n  A200: #fffaf2,\n  A400: #ffe4bf,\n  A700: #ffd9a6,\n  contrast: (\n    50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #000000,\n    500: #000000,\n    600: #000000,\n    700: #000000,\n    800: #000000,\n    900: #000000,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #000000,\n  ),\n);\n\n// Define the palettes for your theme using the Material Design palettes available in palette.scss\n// (imported above). For each palette, you can optionally specify a default, lighter, and darker\n// hue. Available color palettes: https://material.io/design/color/\n$PortugolWebstudio-primary: mat.m2-define-palette($md-webstudio);\n$PortugolWebstudio-accent: mat.m2-define-palette(mat.$m2-pink-palette, A200, A100, A400);\n\n// The warn palette is optional (defaults to red).\n$PortugolWebstudio-warn: mat.m2-define-palette(mat.$m2-red-palette);\n\n// Create the theme object. A theme consists of configurations for individual\n// theming systems such as \"color\" or \"typography\".\n$PortugolWebstudio-theme: mat.m2-define-dark-theme(\n  (\n    color: (\n      primary: $PortugolWebstudio-primary,\n      accent: $PortugolWebstudio-accent,\n      warn: $PortugolWebstudio-warn,\n    ),\n  )\n);\n\n// Include theme styles for core and each component used in your app.\n// Alternatively, you can import and @include the theme mixins for each component\n// that you are using.\n@include mat.all-component-themes($PortugolWebstudio-theme);\n@import \"variables\";\n@import \"@fontsource/lato/400.css\";\n@import \"@fontsource/lato/700.css\";\n\n.mat-mdc-tooltip,\n.mdc-tooltip__surface {\n  --mdc-plain-tooltip-supporting-text-line-height: normal;\n  --mdc-plain-tooltip-supporting-text-size: 0.75rem;\n  --mdc-plain-tooltip-supporting-text-weight: 400;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nhtml,\nbody,\napp-root {\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  margin: 0;\n  font-family: $font;\n}\n\nbody {\n  background-color: $body-bg;\n  color: $body-color;\n}\n\n.text-primary {\n  color: $primary !important;\n}\n\n.text-secondary {\n  color: $secondary !important;\n}\n\n.text-tertiary {\n  color: $tertiary !important;\n}\n\n.text-quaternary {\n  color: $quaternary !important;\n}\n\n.as-split-gutter {\n  background-color: #414141 !important;\n}\n\ns {\n  flex-grow: 1;\n}\n\n.mat-mdc-dialog-container {\n  display: flex !important;\n\n  > * {\n    flex-grow: 1;\n  }\n}\n\n.d-flex {\n  display: flex;\n}\n\nsvg-icon > svg {\n  fill: currentColor;\n}\n", "@keyframes hotToastEnter {\n  from {\n    transform: scale(0);\n  }\n\n  to {\n    transform: scale(1);\n  }\n}\n\n.hot-toast-animated-icon {\n  animation: var(--hot-toast-animated-icon-animation, hotToastEnter 0.3s ease-in-out forwards);\n  position: var(--hot-toast-animated-icon-position, relative);\n  transform: var(--hot-toast-animated-icon-transform, scale(0));\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-animated-icon-reduced-motion-animation-duration, none);\n    opacity: var(--hot-toast-animated-icon-reduced-motion-opacity, 1);\n    transform: var(--hot-toast-animated-icon-reduced-motion-transform, scale(1));\n  }\n}\n", "@keyframes hotToastCircleAnimation {\n  from {\n    opacity: 0;\n    transform: scale(0) rotate(45deg);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1) rotate(45deg);\n  }\n}\n\n@keyframes hotToastCheckmarkAnimation {\n  0% {\n    height: 0;\n    opacity: 0;\n    width: 0;\n  }\n\n  40% {\n    height: 0;\n    opacity: 1;\n    width: 6px;\n  }\n\n  100% {\n    height: 10px;\n    opacity: 1;\n  }\n}\n\n.hot-toast-checkmark-icon {\n  animation: var(\n    --hot-toast-checkmark-icon-animation,\n    hotToastCircleAnimation 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards\n  );\n  animation-delay: var(--hot-toast-checkmark-icon-animation-delay, 100ms);\n  background-color: var(--hot-toast-checkmark-icon-background-color, var(--check-primary, #61d345));\n  border-radius: var(--hot-toast-checkmark-icon-border-radius, 10px);\n  height: var(--hot-toast-checkmark-icon-height, 20px);\n  opacity: var(--hot-toast-checkmark-icon-opacity, 0);\n  position: var(--hot-toast-checkmark-icon-position, relative);\n  transform: var(--hot-toast-checkmark-icon-transform, rotate(45deg));\n  width: var(--hot-toast-checkmark-icon-width, 20px);\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-checkmark-icon-reduced-motion-animation-duration, 0ms);\n  }\n}\n\n.hot-toast-checkmark-icon::after {\n  animation: var(--hot-toast-checkmark-icon-after-animation, hotToastCheckmarkAnimation 0.2s ease-out forwards);\n  animation-delay: var(--hot-toast-checkmark-icon-after-animation-delay, 200ms);\n  border-bottom-style: solid;\n  border-bottom-width: var(--hot-toast-checkmark-icon-after-border-bottom, 2px);\n  border-color: var(--hot-toast-checkmark-icon-after-border-color, var(--check-secondary, #fff));\n  border-right-style: solid;\n  border-right-width: var(--hot-toast-checkmark-icon-after-border-right, 2px);\n  bottom: var(--hot-toast-checkmark-icon-after-bottom, 6px);\n  box-sizing: var(--hot-toast-checkmark-icon-after-box-sizing, border-box);\n  content: var(--hot-toast-checkmark-icon-after-content, '');\n  height: var(--hot-toast-checkmark-icon-after-height, 10px);\n  left: var(--hot-toast-checkmark-icon-after-left, 6px);\n  opacity: var(--hot-toast-checkmark-icon-after-opacity, 0);\n  position: var(--hot-toast-checkmark-icon-after-position, absolute);\n  width: var(--hot-toast-checkmark-icon-after-width, 6px);\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-checkmark-icon-after-reduced-motion-animation-duration, 0ms);\n  }\n}\n", "@keyframes hotToastErrorCircleAnimation {\n  from {\n    opacity: 0;\n    transform: scale(0) rotate(45deg);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1) rotate(45deg);\n  }\n}\n\n@keyframes hotToastFirstLineAnimation {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes hotToastSecondLineAnimation {\n  from {\n    opacity: 0;\n    transform: scale(0) rotate(90deg);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1) rotate(90deg);\n  }\n}\n\n.hot-toast-error-icon {\n  animation: var(\n    --hot-toast-error-icon-animation,\n    hotToastErrorCircleAnimation 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards\n  );\n  animation-delay: var(--hot-toast-error-icon-animation-delay, 100ms);\n  background: var(--hot-toast-error-icon-background, var(--error-primary, #ff4b4b));\n  border-radius: var(--hot-toast-error-icon-border-radius, 10px);\n  height: var(--hot-toast-error-icon-height, 20px);\n  opacity: var(--hot-toast-error-icon-opacity, 0);\n  position: var(--hot-toast-error-icon-position, relative);\n  transform: var(--hot-toast-error-icon-transform, rotate(45deg));\n  width: var(--hot-toast-error-icon-width, 20px);\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-error-icon-reduced-motion-animation-duration, 0ms);\n  }\n}\n\n.hot-toast-error-icon::after,\n.hot-toast-error-icon::before {\n  animation: var(--hot-toast-error-icon-after-before-animation, hotToastFirstLineAnimation 0.15s ease-out forwards);\n  animation-delay: var(--hot-toast-error-icon-after-before-animation-delay, 150ms);\n  background: var(--hot-toast-error-icon-after-before-background, var(--error-secondary, #fff));\n  border-radius: var(--hot-toast-error-icon-after-before-border-radius, 3px);\n  bottom: var(--hot-toast-error-icon-after-before-bottom, 9px);\n  content: var(--hot-toast-error-icon-after-before-content, '');\n  height: var(--hot-toast-error-icon-after-before-height, 2px);\n  left: var(--hot-toast-error-icon-after-before-left, 4px);\n  opacity: var(--hot-toast-error-icon-after-before-opacity, 0);\n  position: var(--hot-toast-error-icon-after-before-position, absolute);\n  width: var(--hot-toast-error-icon-after-before-width, 12px);\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-error-icon-after-before-reduced-motion-animation-duration, 0ms);\n  }\n}\n\n.hot-toast-error-icon::before {\n  animation: var(--hot-toast-error-icon-before-animation, hotToastSecondLineAnimation 0.15s ease-out forwards);\n  animation-delay: var(--hot-toast-error-icon-before-animation-delay, 180ms);\n  transform: var(--hot-toast-error-icon-before-transform, rotate(90deg));\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-error-icon-before-reduced-motion-animation-duration, 0ms);\n  }\n}\n", ".hot-toast-bar-base {\n  align-items: var(--hot-toast-align-items, center);\n  background-color: var(--hot-toast-bg, #fff);\n  border-radius: var(--hot-toast-border-radius, 4px);\n  box-shadow: var(--hot-toast-shadow, 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05));\n  color: var(--hot-toast-color, #363636);\n  display: var(--hot-toast-display, flex);\n  line-height: var(--hot-toast-line, 1.3);\n  margin: var(--hot-toast-margin, 16px);\n  max-width: var(--hot-toast-max-width, 350px);\n  padding: var(--hot-toast-padding, 8px 10px);\n  pointer-events: var(--hot-toast-pointer-events, auto);\n  width: var(--hot-toast-width, fit-content);\n  transition-property: border-bottom-left-radius, border-bottom-right-radius;\n  transition-duration: 230ms;\n  transition-timing-function: ease-out;\n  // will-change: var(--hot-toast-will-change, transform);\n\n  &:hover,\n  &:focus {\n    animation-play-state: var(--hot-toast-animation-state, paused) !important;\n  }\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-reduced-motion-animation-duration, 10ms) !important;\n  }\n\n  .expanded & {\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n}\n\n.hot-toast-message {\n  color: var(--hot-toast-message-color, inherit);\n  display: var(--hot-toast-message-display, flex);\n  flex: var(--hot-toast-message-flex, 1);\n  justify-content: var(--hot-toast-message-justify-content, center);\n  margin: var(--hot-toast-message-margin, 4px 10px);\n}\n\n.hot-toast-bar-base-container {\n  display: var(--hot-toast-container-display, flex);\n  pointer-events: var(--hot-toast-container-pointer-events, none);\n  position: var(--hot-toast-container-position, absolute);\n  transition: var(--hot-toast-container-transition, transform 230ms cubic-bezier(0.21, 1.02, 0.73, 1));\n\n  @media (prefers-reduced-motion: reduce) {\n    transition-duration: var(--hot-toast-container-reduced-motion-transition-duration, 10ms) !important;\n  }\n\n  &.hot-toast-theme-snackbar {\n    .hot-toast-bar-base {\n      background: var(--hot-toast-snackbar-bg, #323232);\n      box-shadow: var(\n        --hot-toast-snackbar-shadow,\n        0 3px 5px -1px rgba(0, 0, 0, 0.2),\n        0 6px 10px 0 rgba(0, 0, 0, 0.14),\n        0 1px 18px 0 rgba(0, 0, 0, 0.12)\n      );\n      color: var(--hot-toast-snackbar-color, rgba(255, 255, 255));\n    }\n\n    .hot-toast-close-btn {\n      filter: var(--hot-toast-snackbar-close-btn-filter, invert(1) grayscale(100%) brightness(200%));\n    }\n  }\n}\n\n.hot-toast-close-btn {\n  align-self: var(--hot-toast-close-btn-align-self, flex-start);\n  background-color: var(--hot-toast-close-btn-background-color, transparent);\n  background-image: var(\n    --hot-toast-close-btn-background-image,\n    url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 011.414 0L8 6.586 14.293.293a1 1 0 111.414 1.414L9.414 8l6.293 6.293a1 1 0 01-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 01-1.414-1.414L6.586 8 .293 1.707a1 1 0 010-1.414z'/%3e%3c/svg%3e\")\n  );\n  background-position: var(--hot-toast-close-btn-background-position, center);\n  background-repeat: var(--hot-toast-close-btn-background-repeat, no-repeat);\n  background-size: var(--hot-toast-close-btn-background-size, 0.75em);\n  border: var(--hot-toast-close-btn-border, 0);\n  border-radius: var(--hot-toast-close-btn-border-radius, 0.25rem);\n  box-sizing: var(--hot-toast-close-btn-box-sizing, content-box);\n  display: var(--hot-toast-close-btn-display, flex);\n  height: var(--hot-toast-close-btn-height, 0.8em);\n  margin-top: var(--hot-toast-close-btn-margin-top, 0.25em);\n  opacity: var(--hot-toast-close-btn-opacity, 0.5);\n  padding: var(--hot-toast-close-btn-padding, 0.25em);\n  width: var(--hot-toast-close-btn-width, 0.8em);\n\n  &:focus {\n    box-shadow: var(--hot-toast-close-btn-box-shadow, 0 0 0 0.125rem rgb(13 110 253 / 25%));\n    outline: var(--hot-toast-close-btn-outline, none);\n  }\n\n  &:hover,\n  &:focus {\n    opacity: var(--hot-toast-close-btn-opacity, 0.75);\n  }\n}\n\n.hot-toast-group-btn {\n  align-self: var(--hot-toast-group-btn-align-self, flex-start);\n  background-color: var(--hot-toast-group-btn-background-color, transparent);\n  background-image: var(\n    --hot-toast-group-btn-background-image,\n    url(\"data:image/svg+xml,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M7.75745 10.5858L9.17166 9.17154L12.0001 12L14.8285 9.17157L16.2427 10.5858L12.0001 14.8284L7.75745 10.5858Z' fill='currentColor' /%3E%3Cpath fill-rule='evenodd' clip-rule='evenodd' d='M1 12C1 5.92487 5.92487 1 12 1C18.0751 1 23 5.92487 23 12C23 18.0751 18.0751 23 12 23C5.92487 23 1 18.0751 1 12ZM12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21Z' fill='currentColor' /%3E%3C/svg%3E\")\n  );\n  background-position: var(--hot-toast-group-btn-background-position, center);\n  background-repeat: var(--hot-toast-group-btn-background-repeat, no-repeat);\n  background-size: var(--hot-toast-group-btn-background-size, 1.3em);\n  border: var(--hot-toast-group-btn-border, 0);\n  border-radius: var(--hot-toast-group-btn-border-radius, 0.25rem);\n  box-sizing: var(--hot-toast-group-btn-box-sizing, content-box);\n  display: var(--hot-toast-group-btn-display, flex);\n  height: var(--hot-toast-group-btn-height, 0.8em);\n  margin-top: var(--hot-toast-group-btn-margin-top, 0.25em);\n  opacity: var(--hot-toast-group-btn-opacity, 0.5);\n  padding: var(--hot-toast-group-btn-padding, 0.25em);\n  width: var(--hot-toast-group-btn-width, 0.8em);\n  will-change: var(--hot-toast-group-btn-will-change, transform);\n  transition: var(--hot-toast-group-btn-transition, transform 230ms cubic-bezier(0.21, 1.02, 0.73, 1));\n\n  &:focus {\n    box-shadow: var(--hot-toast-group-btn-box-shadow, 0 0 0 0.125rem rgb(13 110 253 / 25%));\n    outline: var(--hot-toast-group-btn-outline, none);\n  }\n\n  &:hover,\n  &:focus {\n    opacity: var(--hot-toast-group-btn-opacity, 0.75);\n  }\n\n  .expanded & {\n    transform: rotate(var(--hot-toast-group-btn-expanded-rotate, 180deg));\n  }\n}\n\n.hot-toast-icon {\n  align-self: var(--hot-toast-icon-align-self, flex-start);\n  padding-top: var(--hot-toast-icon-padding-top, 0.25em);\n}\n\n.hot-toast-bar-base-wrapper {\n  pointer-events: all;\n}\n\n.hot-toast-bar-base-group {\n  // remove shadow for child toasts\n  --hot-toast-shadow: none;\n\n  background-color: var(--hot-toast-group-bg, #fff);\n  margin: var(--hot-toast-margin, 16px);\n  margin-top: calc(-1 * var(--hot-toast-margin, 16px));\n  border-bottom-left-radius: var(--hot-toast-border-radius, 4px);\n  border-bottom-right-radius: var(--hot-toast-border-radius, 4px);\n  height: 0;\n  overflow: hidden;\n  transition-property: height;\n  transition-duration: 230ms;\n  transition-timing-function: ease-in-out;\n  position: relative;\n  box-shadow: var(--hot-toast-group-after-shadow, 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05));\n\n  .expanded & {\n    height: var(--hot-toast-group-height);\n  }\n\n  .hot-toast-bar-base {\n    margin: 0;\n  }\n}\n\n@keyframes hotToastEnterAnimationNegative {\n  0% {\n    opacity: 0.5;\n    transform: translate3d(0, -80px, 0) scale(0.6);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate3d(0, 0, 0) scale(1);\n  }\n}\n\n@keyframes hotToastEnterAnimationPositive {\n  0% {\n    opacity: 0.5;\n    transform: translate3d(0, 80px, 0) scale(0.6);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate3d(0, 0, 0) scale(1);\n  }\n}\n\n@keyframes hotToastExitAnimationPositive {\n  0% {\n    opacity: 1;\n    transform: translate3d(0, 0, -1px) scale(1);\n  }\n\n  100% {\n    opacity: 0;\n    transform: translate3d(0, var(--hot-toast-exit-positive-y, 130px), -1px) scale(0.5);\n  }\n}\n\n@keyframes hotToastExitAnimationNegative {\n  0% {\n    opacity: 1;\n    transform: translate3d(0, 0, -1px) scale(1);\n  }\n\n  100% {\n    opacity: 0;\n    transform: translate3d(0, var(--hot-toast-exit-negative-y, -130px), -1px) scale(0.5);\n  }\n}\n\n@keyframes hotToastEnterSoftAnimationNegative {\n  0% {\n    opacity: 0.5;\n    transform: translate3d(0, -14px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes hotToastEnterSoftAnimationPositive {\n  0% {\n    opacity: 0.5;\n    transform: translate3d(0, 14px, 0);\n  }\n\n  100% {\n    opacity: 1;\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n@keyframes hotToastExitSoftAnimationPositive {\n  0% {\n    opacity: 1;\n    transform: translate3d(0, 0, -1px);\n  }\n\n  100% {\n    opacity: 0;\n    transform: translate3d(0, 14px, -1px);\n  }\n}\n\n@keyframes hotToastExitSoftAnimationNegative {\n  0% {\n    opacity: 1;\n    transform: translate3d(0, 0, -1px);\n  }\n\n  100% {\n    opacity: 0;\n    transform: translate3d(0, -14px, -1px);\n  }\n}\n", ".hot-toast-indicator-wrapper {\n  align-items: var(--hot-toast-indicator-wrapper-align-items, center);\n  display: var(--hot-toast-indicator-wrapper-display, flex);\n  justify-content: var(--hot-toast-indicator-wrapper-justify-content, center);\n  min-height: var(--hot-toast-indicator-wrapper-min-height, 20px);\n  min-width: var(--hot-toast-indicator-wrapper-min-width, 20px);\n  position: var(--hot-toast-indicator-wrapper-position, relative);\n}\n\n.hot-toast-status-wrapper {\n  position: var(--hot-toast-status-wrapper-position, absolute);\n}\n", "@keyframes animate-info-background {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes animate-info-line {\n  0% {\n    height: 0;\n    opacity: 0;\n  }\n\n  40% {\n    height: 4.8px;\n    opacity: 1;\n  }\n\n  100% {\n    height: 8px;\n    opacity: 1;\n  }\n}\n\n.hot-toast-info-icon {\n  animation: var(\n    --hot-toast-info-icon-animation,\n    animate-info-background 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards\n  );\n  animation-delay: var(--hot-toast-info-icon-animation-delay, 100ms);\n  background-color: var(--hot-toast-info-icon-background-color, var(--info-primary, #0d6efd));\n  border-radius: var(--hot-toast-info-icon-border-radius, 50%);\n  display: var(--hot-toast-info-icon-display, block);\n  height: var(--hot-toast-info-icon-height, 20px);\n  opacity: var(--hot-toast-info-icon-opacity, 0);\n  position: var(--hot-toast-info-icon-position, relative);\n  transform: var(--hot-toast-info-icon-transform, scale(0));\n  width: var(--hot-toast-info-icon-width, 20px);\n\n  &::after,\n  &::before {\n    background-color: var(--hot-toast-info-icon-after-before-background-color, var(--info-secondary, #fff));\n    border-radius: var(--hot-toast-info-icon-after-before-border-radius, 3px);\n    box-sizing: var(--hot-toast-info-icon-after-before-box-sizing, border-box);\n    content: var(--hot-toast-info-icon-after-before-content, '');\n    display: var(--hot-toast-info-icon-after-before-display, block);\n    left: var(--hot-toast-info-icon-after-before-left, 8.5px);\n    position: var(--hot-toast-info-icon-after-before-position, absolute);\n    width: var(--hot-toast-info-icon-after-before-width, 2.5px);\n  }\n\n  &::after {\n    animation: var(--hot-toast-info-icon-after-animation, animate-info-line 0.2s ease-out forwards);\n    animation-delay: var(--hot-toast-info-icon-after-animation-delay, 200ms);\n    height: var(--hot-toast-info-icon-after-height, 0);\n    opacity: var(--hot-toast-info-icon-after-opacity, 0);\n    top: var(--hot-toast-info-icon-after-bottom, 8px);\n  }\n\n  &::before {\n    height: var(--hot-toast-info-icon-before-height, 2px);\n    top: var(--hot-toast-info-icon-before-top, 4px);\n  }\n}\n", "@keyframes hotToastRotate {\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.hot-toast-loader-icon {\n  animation: var(--hot-toast-loader-icon-animation, hotToastRotate 1s linear infinite);\n  border: var(--hot-toast-loader-icon-border, 2px solid);\n  border-bottom-color: var(--hot-toast-loader-icon-border-color, #e0e0e0);\n  border-left-color: var(--hot-toast-loader-icon-border-color, #e0e0e0);\n  border-radius: var(--hot-toast-loader-icon-border-radius, 100%);\n  border-right-color: var(--hot-toast-loader-icon-border-right-color, #616161);\n  border-top-color: var(--hot-toast-loader-icon-border-color, #e0e0e0);\n  box-sizing: var(--hot-toast-loader-icon-box-sizing, border-box);\n  height: var(--hot-toast-loader-icon-height, 18px);\n  padding-top: var(--hot-toast-loader-icon-padding-top, 2px);\n  width: var(--hot-toast-loader-icon-width, 18px);\n\n  @media (prefers-reduced-motion: reduce) {\n    animation-duration: var(--hot-toast-loader-icon-reduced-motion-animation-duration, 5s);\n  }\n}\n", "@keyframes animate-warn-background {\n  from {\n    opacity: 0;\n    transform: scale(0);\n  }\n\n  to {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n\n@keyframes animate-warn-line {\n  0% {\n    height: 0;\n    opacity: 0;\n  }\n\n  40% {\n    height: 4.8px;\n    opacity: 1;\n  }\n\n  100% {\n    height: 8px;\n    opacity: 1;\n  }\n}\n\n.hot-toast-warning-icon {\n  animation: var(\n    --hot-toast-warning-icon-animation,\n    animate-warn-background 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards\n  );\n  animation-delay: var(--hot-toast-warning-icon-animation-delay, 100ms);\n  background-color: var(--hot-toast-warning-icon-background-color, var(--warn-primary, #ffab00));\n  border-radius: var(--hot-toast-warning-icon-border-radius, 50%);\n  display: var(--hot-toast-warning-icon-display, block);\n  height: var(--hot-toast-warning-icon-height, 20px);\n  opacity: var(--hot-toast-warning-icon-opacity, 0);\n  position: var(--hot-toast-warning-icon-position, relative);\n  transform: var(--hot-toast-warning-icon-transform, scale(0));\n  width: var(--hot-toast-warning-icon-width, 20px);\n\n  &::after,\n  &::before {\n    background-color: var(--hot-toast-warning-icon-after-before-background-color, var(--warn-secondary, #fff));\n    border-radius: var(--hot-toast-warning-icon-after-before-border-radius, 3px);\n    box-sizing: var(--hot-toast-warning-icon-after-before-box-sizing, border-box);\n    content: var(--hot-toast-warning-icon-after-before-content, '');\n    display: var(--hot-toast-warning-icon-after-before-display, block);\n    left: var(--hot-toast-warning-icon-after-before-left, 8.5px);\n    position: var(--hot-toast-warning-icon-after-before-position, absolute);\n    width: var(--hot-toast-warning-icon-after-before-width, 2.5px);\n  }\n\n  &::after {\n    animation: var(--hot-toast-warning-icon-after-animation, animate-warn-line 0.2s ease-out forwards);\n    animation-delay: var(--hot-toast-warning-icon-after-animation-delay, 200ms);\n    height: var(--hot-toast-warning-icon-after-height, 0);\n    opacity: var(--hot-toast-warning-icon-after-opacity, 0);\n    top: var(--hot-toast-warning-icon-after-top, 4px);\n  }\n\n  &::before {\n    bottom: var(--hot-toast-warning-icon-before-bottom, 4px);\n    height: var(--hot-toast-warning-icon-before-height, 2px);\n  }\n}\n", "@use '@angular/cdk';\n@use '../tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use '../tokens/token-utils';\n\n@mixin ripple() {\n  // The host element of an mat-ripple directive should always have a position of \"absolute\" or\n  // \"relative\" so that the ripples inside are correctly positioned relatively to the container.\n  .mat-ripple {\n    overflow: hidden;\n\n    // By default, every ripple container should have position: relative in favor of creating an\n    // easy API for developers using the MatRipple directive.\n    position: relative;\n\n    // Promote containers that have ripples to a new layer. We want to target `:not(:empty)`,\n    // because we don't want all ripple containers to have their own layer since they're used in a\n    // lot of places and the layer is only relevant while animating. Note that ideally we'd use\n    // the `contain` property here (see #13175), because `:empty` can be broken by having extra\n    // text inside the element, but it isn't very well supported yet.\n    &:not(:empty) {\n      transform: translateZ(0);\n    }\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n\n    // We use a 3d transform here in order to avoid an issue in Safari where\n    // the ripples aren't clipped when inside the shadow DOM (see #24028).\n    transform: scale3d(0, 0, 0);\n\n    @include token-utils.use-tokens(\n      tokens-mat-ripple.$prefix, tokens-mat-ripple.get-token-slots()) {\n      // We have to emit a fallback value here, because some internal builds depend on it.\n      background-color: var(#{token-utils.get-token-variable(color)}, rgba(#000, 0.1));\n    }\n\n    // In high contrast mode the ripple is opaque, causing it to obstruct the content.\n    @include cdk.high-contrast(active, off) {\n      display: none;\n    }\n\n    // Hide ripples inside cloned drag&drop elements since they won't go away.\n    .cdk-drag-preview &,\n    .cdk-drag-placeholder & {\n      display: none;\n    }\n  }\n}\n", "/// Emits a CSS class, `.cdk-visually-hidden`. This class can be applied to an element\n/// to make that element visually hidden while remaining available to assistive technology.\n@mixin a11y-visually-hidden() {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n\n    // This works around a Chrome bug that can cause the tab to crash when large amounts of\n    // non-English text get wrapped: https://bugs.chromium.org/p/chromium/issues/detail?id=1201444\n    white-space: nowrap;\n\n    // Avoid browsers rendering the focus ring in some cases.\n    outline: 0;\n\n    // Avoid some cases where the browser will still render the native controls (see #9049).\n    -webkit-appearance: none;\n    -moz-appearance: none;\n\n    // We need at least one of top/bottom/left/right in order to prevent cases where the\n    // absolute-positioned element is pushed down and can affect scrolling (see #24597).\n    // `left` was chosen here, because it's the least likely to break overrides where the\n    // element might have been positioned (e.g. `mat-checkbox`).\n    left: 0;\n\n    [dir='rtl'] & {\n      left: auto;\n      right: 0;\n    }\n  }\n}\n\n/// @deprecated Use `a11y-visually-hidden`.\n@mixin a11y() {\n  @include a11y-visually-hidden;\n}\n\n/// Emits the mixin's content nested under `$selector-context` if `$selector-context`\n/// is non-empty.\n/// @param {String} selector-context The selector under which to nest the mixin's content.\n@mixin _optionally-nest-content($selector-context) {\n  @if ($selector-context == '') {\n    @content;\n  }\n  @else {\n    #{$selector-context} {\n      @content;\n    }\n  }\n}\n\n/// Applies styles for users in high contrast mode. Note that this only applies\n/// to Microsoft browsers. Chrome can be included by checking for the `html[hc]`\n/// attribute, however Chrome handles high contrast differently.\n///\n/// @param {String} target Type of high contrast setting to target. Defaults to `active`, can be\n///     `white-on-black` or `black-on-white`.\n/// @param {String} encapsulation Whether to emit styles for view encapsulation. Values are:\n///     * `on` - works for `Emulated`, `Native`, and `ShadowDom`\n///     * `off` - works for `None`\n///     * `any` - works for all encapsulation modes by emitting the CSS twice (default).\n@mixin high-contrast($target: active, $encapsulation: 'any') {\n  @if ($target != 'active' and $target != 'black-on-white' and $target != 'white-on-black') {\n    @error 'Unknown cdk-high-contrast value \"#{$target}\" provided. ' +\n           'Allowed values are \"active\", \"black-on-white\", and \"white-on-black\"';\n  }\n\n  @if ($encapsulation != 'on' and $encapsulation != 'off' and $encapsulation != 'any') {\n    @error 'Unknown cdk-high-contrast encapsulation \"#{$encapsulation}\" provided. ' +\n           'Allowed values are \"on\", \"off\", and \"any\"';\n  }\n\n  // If the selector context has multiple parts, such as `.section, .region`, just doing\n  // `.cdk-high-contrast-xxx #{&}` will only apply the parent selector to the first part of the\n  // context. We address this by nesting the selector context under .cdk-high-contrast.\n  @at-root {\n    $selector-context: #{&};\n\n    @if ($encapsulation != 'on') {\n      // Note that if this selector is updated, the same change has to be made inside\n      // `_overlay.scss` which can't depend on this mixin due to some infrastructure limitations.\n      .cdk-high-contrast-#{$target} {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n\n    @if ($encapsulation != 'off') {\n      .cdk-high-contrast-#{$target} :host {\n        @include _optionally-nest-content($selector-context) {\n          @content;\n        }\n      }\n    }\n  }\n}\n", "// We want overlays to always appear over user content, so set a baseline\n// very high z-index for the overlay container, which is where we create the new\n// stacking context for all overlays.\n$overlay-container-z-index: 1000 !default;\n$overlay-z-index: 1000 !default;\n$overlay-backdrop-z-index: 1000 !default;\n\n// Background color for all of the backdrops\n$overlay-backdrop-color: rgba(0, 0, 0, 0.32) !default;\n\n// Default backdrop animation is based on the Material Design swift-ease-out.\n$backdrop-animation-duration: 400ms !default;\n$backdrop-animation-timing-function: cubic-bezier(0.25, 0.8, 0.25, 1) !default;\n\n/// Emits structural styles required for cdk/overlay to function.\n@mixin overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $overlay-container-z-index;\n\n    &:empty {\n      // Hide the element when it doesn't have any child nodes. This doesn't\n      // include overlays that have been detached, rather than disposed.\n      display: none;\n    }\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $overlay-z-index;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    // Note: it's important for this one to start off `absolute`,\n    // in order for us to be able to measure it correctly.\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $overlay-z-index;\n\n    // For connected-position overlays, we set `display: flex` in\n    // order to force `max-width` and `max-height` to take effect.\n    display: flex;\n    max-width: 100%;\n    max-height: 100%;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $overlay-backdrop-z-index;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n    transition: opacity $backdrop-animation-duration $backdrop-animation-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 1;\n\n      // Note that we can't import and use the `high-contrast` mixin from `_a11y.scss`, because\n      // this file will be copied to the top-level `cdk` package when putting together the files\n      // for npm. Any relative import paths we use here will become invalid once the file is copied.\n      .cdk-high-contrast-active & {\n        // In high contrast mode the rgba background will become solid\n        // so we need to fall back to making it opaque using `opacity`.\n        opacity: 0.6;\n      }\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $overlay-backdrop-color;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    // Define a transition on the visibility so that the `transitionend` event can fire immediately.\n    transition: visibility 1ms linear, opacity 1ms linear;\n    visibility: hidden;\n    opacity: 1;\n\n    // Note: as of Firefox 57, having the backdrop be `background: none` will prevent it from\n    // capturing the user's mouse scroll events. Since we also can't use something like\n    // `rgba(0, 0, 0, 0)`, we work around the inconsistency by not setting the background at\n    // all and using `opacity` to make the element transparent.\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0;\n      visibility: visible;\n    }\n  }\n\n  .cdk-overlay-backdrop-noop-animation {\n    transition: none;\n  }\n\n  // Overlay parent element used with the connected position strategy. Used to constrain the\n  // overlay element's size to fit within the viewport.\n  .cdk-overlay-connected-position-bounding-box {\n    position: absolute;\n    z-index: $overlay-z-index;\n\n    // We use `display: flex` on this element exclusively for centering connected overlays.\n    // When *not* centering, a top/left/bottom/right will be set which overrides the normal\n    // flex layout.\n    display: flex;\n\n    // We use the `column` direction here to avoid some flexbox issues in Edge\n    // when using the \"grow after open\" options.\n    flex-direction: column;\n\n    // Add some dimensions so the element has an `innerText` which some people depend on in tests.\n    min-width: 1px;\n    min-height: 1px;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we're using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn't be an issue, because we won't\n    // block scrolling on a page that doesn't have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n", "// Structural styles for the autosize text fields.\n@mixin text-field-autosize() {\n  // Remove the resize handle on autosizing textareas, because whatever height\n  // the user resized to will be overwritten once they start typing again.\n  textarea.cdk-textarea-autosize {\n    resize: none;\n  }\n\n  // This class is temporarily applied to the textarea when it is being measured. It is immediately\n  // removed when measuring is complete. We use `!important` rules here to make sure user-specified\n  // rules do not interfere with the measurement.\n  textarea.cdk-textarea-autosize-measuring {\n    @include _autosize-measuring-base;\n    height: auto !important;\n    overflow: hidden !important;\n  }\n\n  // Similar to the `cdk-textarea-autosize-measuring` class, but only applied on Firefox. We need\n  // to use this class, because Firefox has a bug where changing the `overflow` breaks the user's\n  // ability to undo/redo what they were typing (see #16629). This class is only scoped to Firefox,\n  // because the measurements there don't seem to be affected by the `height: 0`, whereas on other\n  // browsers they are, e.g. Chrome detects longer text and IE does't resize back to normal.\n  // Identical issue report: https://bugzilla.mozilla.org/show_bug.cgi?id=448784\n  textarea.cdk-textarea-autosize-measuring-firefox {\n    @include _autosize-measuring-base;\n    height: 0 !important;\n  }\n}\n\n// Core styles that enable monitoring autofill state of text fields.\n@mixin text-field-autofill() {\n  // Keyframes that apply no styles, but allow us to monitor when an text field becomes autofilled\n  // by watching for the animation events that are fired when they start. Note: the /*!*/ comment is\n  // needed to prevent LibSass from stripping the keyframes out.\n  // Based on: https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n  @keyframes cdk-text-field-autofill-start {/*!*/}\n  @keyframes cdk-text-field-autofill-end {/*!*/}\n\n  .cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms;\n  }\n\n  .cdk-text-field-autofill-monitored:not(:-webkit-autofill) {\n    // Since Chrome 80 we need a 1ms delay, or the animationstart event won't fire.\n    animation: cdk-text-field-autofill-end 0s 1ms;\n  }\n}\n\n@mixin _autosize-measuring-base {\n  // Having 2px top and bottom padding seems to fix a bug where Chrome gets an incorrect\n  // measurement. We just have to account for it later and subtract it off the final result.\n  padding: 2px 0 !important;\n  box-sizing: content-box !important;\n}\n\n// Used to generate UIDs for keyframes used to change the text field autofill styles.\n$autofill-color-frame-count: 0;\n\n// Mixin used to apply custom background and foreground colors to an autofilled text field.\n// Based on: https://stackoverflow.com/questions/2781549/\n// removing-input-background-colour-for-chrome-autocomplete#answer-37432260\n@mixin text-field-autofill-color($background, $foreground:'') {\n  @keyframes cdk-text-field-autofill-color-#{$autofill-color-frame-count} {\n    to {\n      background: $background;\n      @if $foreground != '' { color: $foreground; }\n    }\n  }\n\n  &:-webkit-autofill {\n    animation: cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  &.cdk-text-field-autofill-monitored:-webkit-autofill {\n    // Since Chrome 80 we need a 1ms delay for cdk-text-field-autofill-start, or the animationstart\n    // event won't fire.\n    animation: cdk-text-field-autofill-start 0s 1ms,\n               cdk-text-field-autofill-color-#{$autofill-color-frame-count} both;\n  }\n\n  $autofill-color-frame-count: $autofill-color-frame-count + 1 !global;\n}\n\n// @deprecated Use `autosize` and `autofill` instead.\n@mixin text-field {\n  @include text-field-autosize();\n  @include text-field-autofill();\n}\n", "@use 'sass:map';\n@use 'sass:meta';\n@use '@angular/cdk';\n@use '../style/layout-common';\n@use '../theming/theming';\n@use '../theming/inspection';\n\n// Private sass variables that will be used as reference throughout component stylesheets.\n$default-border-width: 3px;\n$default-border-style: solid;\n$default-border-color: transparent;\n$default-border-radius: 4px;\n\n// Mixin that renders the focus indicator structural styles.\n@mixin structural-styling($prefix) {\n  .#{$prefix}-focus-indicator {\n    position: relative;\n\n    &::before {\n      @include layout-common.fill();\n      box-sizing: border-box;\n      pointer-events: none;\n      display: var(--#{$prefix}-focus-indicator-display, none); // Hide the indicator by default.\n      border: var(\n          --#{$prefix}-focus-indicator-border-width,\n          #{$default-border-width}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-style,\n          #{$default-border-style}\n        )\n        var(\n          --#{$prefix}-focus-indicator-border-color,\n          #{$default-border-color}\n        );\n      border-radius: var(\n        --#{$prefix}-focus-indicator-border-radius,\n        #{$default-border-radius}\n      );\n    }\n\n    // By default, render the focus indicator when the focus indicator host element takes focus.\n    // Defining a pseudo element's content will cause it to render.\n    &:focus::before {\n      content: '';\n    }\n  }\n\n  // Enable the indicator in high contrast mode.\n  @include cdk.high-contrast(active, off) {\n    @include customize-focus-indicators((display: block), $prefix);\n  }\n}\n\n// Generates CSS variable declarations from a map.\n@mixin _output-variables($map) {\n  @each $key, $value in $map {\n    @if ($value) {\n      --#{$key}: #{$value};\n    }\n  }\n}\n\n// Mixin that dedups CSS variables for the strong-focus-indicators mixin.\n@mixin customize-focus-indicators($config, $prefix) {\n  $border-style: map.get($config, border-style);\n  $border-width: map.get($config, border-width);\n  $border-radius: map.get($config, border-radius);\n  $border-color: map.get($config, border-color);\n  $display: map.get($config, display);\n  $map: (\n    '#{$prefix}-focus-indicator-border-style': $border-style,\n    '#{$prefix}-focus-indicator-border-width': $border-width,\n    '#{$prefix}-focus-indicator-border-radius': $border-radius,\n    '#{$prefix}-focus-indicator-border-color': $border-color,\n    '#{$prefix}-focus-indicator-display': $display,\n  );\n\n  @if (&) {\n    @include _output-variables($map);\n  }\n  @else {\n    // We use `html` here instead of `:root`, because the\n    // latter causes some issues with internal tooling.\n    html {\n      @include _output-variables($map);\n    }\n  }\n}\n\n@mixin strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat');\n}\n\n@mixin mdc-strong-focus-indicators($config: ()) {\n  // Default focus indicator config.\n  $default-config: (\n      border-color: black,\n      display: block,\n  );\n\n  // Merge default config with user config.\n  $config: map.merge($default-config, $config);\n\n  @include customize-focus-indicators($config, 'mat-mdc');\n}\n\n@mixin strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat');\n  }\n}\n\n@mixin strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles($theme-or-color, 'mat-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n\n@mixin mdc-strong-focus-indicators-color($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    $border-color: inspection.get-theme-color($theme-or-color, primary);\n    @include customize-focus-indicators((\n        border-color: $border-color\n    ), 'mat-mdc');\n  }\n}\n\n@mixin mdc-strong-focus-indicators-theme($theme-or-color) {\n  @if meta.type-of($theme-or-color) == 'color' {\n    @include customize-focus-indicators((\n        border-color: $theme-or-color\n    ), 'mat-mdc');\n  }\n  @else {\n    @include theming.private-check-duplicate-theme-styles(\n        $theme-or-color, 'mat-mdc-focus-indicators') {\n      @if inspection.theme-has($theme-or-color, color) {\n        @include mdc-strong-focus-indicators-color($theme-or-color);\n      }\n    }\n  }\n}\n", "// This mixin ensures an element spans to fill the nearest ancestor with defined positioning.\n@mixin fill {\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n}\n", "@use '@angular/cdk';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/token-utils';\n@use './ripple/ripple';\n@use './style/elevation';\n@use './focus-indicators/private';\n\n// Mixin that renders all of the core styles that are not theme-dependent.\n@mixin core() {\n  @include ripple.ripple();\n  @include cdk.a11y-visually-hidden();\n  @include cdk.overlay();\n  @include cdk.text-field-autosize();\n  @include cdk.text-field-autofill();\n  @include private.structural-styling('mat');\n  @include private.structural-styling('mat-mdc');\n\n  // Wrapper element that provides the theme background when the\n  // user's content isn't inside of a `mat-sidenav-container`.\n  @at-root {\n    // Note: we need to emit fallback values here to avoid errors in internal builds.\n    @include token-utils.use-tokens(tokens-mat-app.$prefix, tokens-mat-app.get-token-slots()) {\n      .mat-app-background {\n        @include token-utils.create-token-slot(background-color, background-color, transparent);\n        @include token-utils.create-token-slot(color, text-color, inherit);\n      }\n\n      // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n      // `mat-elevation-z$z-value` where `$z-value` corresponds to the z-space to which the element\n      // is elevated.\n      @for $z-value from 0 through 24 {\n        $selector: elevation.$prefix + $z-value;\n        // We need the `mat-mdc-elevation-specific`, because some MDC mixins\n        // come with elevation baked in and we don't have a way of removing it.\n        .#{$selector}, .mat-mdc-elevation-specific.#{$selector} {\n          @include token-utils.create-token-slot(box-shadow, 'elevation-shadow-level-#{$z-value}',\n            none);\n        }\n      }\n    }\n  }\n}\n", "@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:string';\n@use 'sass:color';\n@use 'sass:math';\n@use '../style/elevation';\n@use '../style/sass-utils';\n@use '../m2/palette' as m2-palette;\n@use '../m2/theming' as m2-theming;\n@use '../m2/typography' as m2-typography;\n@use './m3/definitions' as m3-token-definitions;\n\n// Indicates whether we're building internally. Used for backwards compatibility.\n$private-is-internal-build: false;\n\n$_placeholder-color-palette: m2-theming.define-palette(m2-palette.$red-palette);\n\n// Placeholder color config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-color-config: (\n  primary: $_placeholder-color-palette,\n  accent: $_placeholder-color-palette,\n  warn: $_placeholder-color-palette,\n  is-dark: false,\n  foreground: m2-palette.$light-theme-foreground-palette,\n  background: m2-palette.$light-theme-background-palette,\n);\n\n$_placeholder-typography-level-config: m2-typography.typography-config-level-from-mdc(body1);\n\n// Placeholder typography config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-typography-config: (\n  font-family: 'Roboto, sans-serif',\n  headline-1: $_placeholder-typography-level-config,\n  headline-2: $_placeholder-typography-level-config,\n  headline-3: $_placeholder-typography-level-config,\n  headline-4: $_placeholder-typography-level-config,\n  headline-5: $_placeholder-typography-level-config,\n  headline-6: $_placeholder-typography-level-config,\n  subtitle-1: $_placeholder-typography-level-config,\n  subtitle-2: $_placeholder-typography-level-config,\n  body-1: $_placeholder-typography-level-config,\n  body-2: $_placeholder-typography-level-config,\n  caption: $_placeholder-typography-level-config,\n  button: $_placeholder-typography-level-config,\n  overline: $_placeholder-typography-level-config,\n  subheading-1: $_placeholder-typography-level-config,\n  title: $_placeholder-typography-level-config,\n);\n\n// Placeholder density config that can be passed to token getter functions when generating token\n// slots.\n$placeholder-density-config: 0;\n\n$_tokens: null;\n$_component-prefix: null;\n\n// Sets the token prefix and map to use when creating token slots.\n@mixin use-tokens($prefix, $tokens) {\n  $_component-prefix: $prefix !global;\n  $_tokens: $tokens !global;\n\n  @content;\n\n  $_component-prefix: null !global;\n  $_tokens: null !global;\n}\n\n// Combines a prefix and a string to generate a CSS variable name for a token.\n@function _get-css-variable($prefix, $name) {\n  @if $prefix == null or $name == null {\n    @error 'Must specify both prefix and name when generating token';\n  }\n\n  $string-prefix: '';\n\n  // Prefixes are lists so we need to combine them.\n  @each $part in $prefix {\n    $string-prefix: if($string-prefix == '', $part, '#{$string-prefix}-#{$part}');\n  }\n\n  @return string.unquote('--#{$string-prefix}-#{$name}');\n}\n\n// Emits a slot for the given token, provided that it has a non-null value in the token map passed\n// to `use-tokens`.\n@mixin create-token-slot($property, $token, $emit-fallback: false) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`create-token-slot` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n  @if map.get($_tokens, $token) != null {\n    $fallback: null;\n\n    @if ($emit-fallback == true) {\n      $fallback: map.get($_tokens, $token);\n    }\n    @else if ($emit-fallback) {\n      $fallback: $emit-fallback;\n    }\n\n    $var-name: _get-css-variable($_component-prefix, $token);\n    $var-reference: if($fallback == null, var(#{$var-name}), var(#{$var-name}, #{$fallback}));\n    #{$property}: #{$var-reference};\n  }\n}\n\n// Returns the name of a token including the current prefix. Intended to be used in calculations\n// involving tokens. `create-token-slot` should be used when outputting tokens.\n@function get-token-variable($token) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`get-token-variable` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  @return _get-css-variable($_component-prefix, $token);\n}\n\n// TODO(crisbeto): should be able to replace the usages of `get-token-variable` with this.\n// Returns a `var()` reference to a specific token. Intended for declarations\n// where the token has to be referenced as a part of a larger expression.\n@function get-token-variable-reference($token, $emit-fallback: false) {\n  @if $_component-prefix == null or $_tokens == null {\n    @error '`get-token-variable-reference` must be used within `use-tokens`';\n  }\n  @if not map.has-key($_tokens, $token) {\n    @error 'Token #{$token} does not exist. Configured tokens are: #{map.keys($_tokens)}';\n  }\n\n  $var: get-token-variable($token);\n  $fallback: if($emit-fallback, map.get($_tokens, $token), null);\n\n  @if ($fallback != null) {\n    @return var($var, $fallback);\n  }\n  @else {\n    @return var($var);\n  }\n}\n\n// Outputs a map of tokens under a specific prefix.\n@mixin create-token-values($prefix, $tokens) {\n  @if $tokens != null {\n    @each $key, $value in $tokens {\n      @if $value != null {\n        #{_get-css-variable($prefix, $key)}: #{$value};\n      }\n    }\n  }\n}\n\n/// Gets all the MDC token values for a specific component. This function serves as single\n/// point at which we directly reference a specific version of the MDC tokens.\n/// @param {String} $component Name of the component for which to get the tokens\n/// @param {Map} $systems The MDC system tokens\n/// @param {Boolean} $exclude-hardcoded Whether to exclude hardcoded token values\n/// @return {List} Map of token names to values\n@function get-mdc-tokens($component, $systems, $exclude-hardcoded) {\n  $full-name: 'md-comp-' + $component + '-values';\n  $fn: meta.get-function($name: $full-name, $module: 'm3-token-definitions');\n  @return meta.call($fn, $systems, $exclude-hardcoded);\n}\n\n// MDC doesn't currently handle elevation tokens properly. As a temporary workaround we can combine\n// the elevation and shadow-color tokens into a full box-shadow and use it as the value for the\n// elevation token.\n@function resolve-elevation($tokens, $elevation-token, $shadow-color-token) {\n  $elevation: map.get($tokens, $elevation-token);\n  $shadow-color: map.get($tokens, $shadow-color-token);\n  @return map.merge($tokens, (\n    $elevation-token: elevation.get-box-shadow($elevation, $shadow-color),\n    $shadow-color-token: null,\n  ));\n}\n\n/// Checks whether a list starts wih a given prefix\n/// @param {List} $list The list value to check the prefix of.\n/// @param {List} $prefix The prefix to check.\n/// @return {Boolean} Whether the list starts with the prefix.\n@function _is-prefix($list, $prefix) {\n  @for $i from 1 through list.length($prefix) {\n    @if list.nth($list, $i) != list.nth($prefix, $i) {\n      @return false;\n    }\n  }\n  @return true;\n}\n\n/// Gets the supported color variants in the given token set for the given prefix.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get color variants for.\n/// @return {List} The supported color variants.\n@function _supported-color-variants($tokens, $prefix) {\n  $result: ();\n  @each $namespace in map.keys($tokens) {\n    @if list.length($prefix) == list.length($namespace) - 1 and _is-prefix($namespace, $prefix) {\n      $result: list.append($result, list.nth($namespace, list.length($namespace)), comma);\n    }\n  }\n  @return $result;\n}\n\n/// Gets the token values for the given components prefix with the given options.\n/// @param {Map} $tokens The full token map.\n/// @param {List} $prefix The component prefix to get the token values for.\n/// @param {ArgList} Any additional options\n///   Currently the additional supported options are:\n//     - $color-variant - The color variant to use for the component\n//     - $emit-overrides-only - Whether to emit *only* the overrides for the\n//                              specific color variant, or all color styles. Defaults to false.\n/// @throws If given options are invalid\n/// @return {Map} The token values for the requested component.\n@function get-tokens-for($tokens, $prefix, $options...) {\n  $options: sass-utils.validate-keyword-args($options, (color-variant, emit-overrides-only));\n  @if $tokens == () {\n    @return ();\n  }\n  $values: map.get($tokens, $prefix);\n  $color-variant: map.get($options, color-variant);\n  $emit-overrides-only: map.get($options, emit-overrides-only);\n  @if $color-variant == null {\n    @return $values;\n  }\n  $overrides: map.get($tokens, list.append($prefix, $color-variant));\n  @if $overrides == null {\n    $variants: _supported-color-variants($tokens, $prefix);\n    $secondary-message: if($variants == (),\n      'Mixin does not support color variants',\n      'Supported color variants are: #{$variants}'\n    );\n\n    @error 'Invalid color variant: #{$color-variant}. #{$secondary-message}.';\n  }\n  @return if($emit-overrides-only, $overrides, map.merge($values, $overrides));\n}\n\n/// Emits new token values for the given token overrides.\n/// Verifies that the overrides passed in are valid tokens.\n/// New token values are emitted under the current selector or root.\n@mixin batch-create-token-values($overrides: (), $token-maps...) {\n  @include _validate-token-overrides($overrides, $token-maps);\n\n  @each $token-map in $token-maps {\n    $prefix: map.get($token-map, prefix);\n    $tokens: map.get($token-map, tokens);\n\n    @each $name, $value in $tokens {\n      $tokens: map.set($tokens, $name, map.get($overrides, $name));\n    }\n\n    @include sass-utils.current-selector-or-root() {\n      @include create-token-values($prefix, $tokens);\n    }\n  }\n}\n\n/// Gets the MDC tokens for the given prefix, M3 token values, and supported token slots.\n/// @param {List} $prefix The token prefix for the given tokens.\n/// @param {Map|(Map, Map)} $values A map of M3 token values for the given prefix.\n///  This param may also be a tuple of maps, the first one representing the default M3 token values,\n//   and the second containing overrides for different color variants.\n//   Single map example:\n//     (token1: green, token2: 2px)\n//   Tuple example:\n//     (\n//       (token1: green, token2: 2px),\n//       (\n//         secondary: (token1: blue),\n//         error: (token1: red),\n//       )\n//     )\n/// @param {Map} $slots A map of token slots, with null value indicating the token is not supported.\n/// @param {String|null} $variant The name of the variant the token values are for.\n/// @return {Map} A map of fully qualified token names to values, for only the supported tokens.\n@function namespace-tokens($prefix, $values, $slots, $variant: null) {\n  $result: ();\n  @if $variant == null and meta.type-of($values) == 'list' and list.length($values == 2) {\n    $variants: list.nth($values, 2);\n    $values: list.nth($values, 1);\n    @each $variant, $overrides in $variants {\n      $result: map.merge($result, namespace-tokens($prefix, $overrides, $slots, $variant));\n    }\n  }\n  $used-token-names: map.keys(_filter-nulls(map.get($slots, $prefix)));\n  $used-m3-tokens: _pick(_filter-nulls($values), $used-token-names);\n  $prefix: if($variant == null, $prefix, list.append($prefix, $variant));\n  @return map.merge($result, ($prefix: $used-m3-tokens));\n}\n\n/// Hardcode the given value, or null if hardcoded values are excluded.\n@function hardcode($value, $exclude-hardcoded) {\n  @return if($exclude-hardcoded, null, $value);\n}\n\n/// Sets all of the standard typography tokens for the given token base name to the given typography\n/// level.\n/// @param {Map} $systems The MDC system tokens\n/// @param {String} $base-name The token base name to get the typography tokens for\n/// @param {String} $typography-level The typography level to base the token values on\n/// @return {Map} A map containing the typography tokens for the given base token name\n@function generate-typography-tokens($systems, $base-name, $typography-level) {\n  $result: ();\n  @each $prop in (font, line-height, size, tracking, weight) {\n    $result: map.set($result, #{$base-name}-#{$prop},\n      map.get($systems, md-sys-typescale, #{$typography-level}-#{$prop}));\n  }\n  @return $result;\n}\n\n/// Maps the values in a map to new values using the given mapping function\n/// @param {Map} $map The maps whose values will be mapped to new values.\n/// @param {Function} $fn The value mapping function.\n/// @param {Map} A new map with its values updated using the mapping function.\n@function map-values($map, $fn) {\n  $result: ();\n  @each $key, $value in $map {\n    $result: map.set($result, $key, meta.call($fn, $value));\n  }\n  @return $result;\n}\n\n/// Renames the keys in a map\n/// @param {Map} $map The map whose keys should be renamed\n/// @param {Map} $rename-keys A map of original key to renamed key to apply to $map\n/// @return {Map} The result of applying the given key renames to the given map.\n@function rename-map-keys($map, $rename-keys) {\n  $result: $map;\n  @each $old-key-name, $new-key-name in $rename-keys {\n    @if map.has-key($map, $old-key-name) {\n      $result: map.set($result, $new-key-name, map.get($map, $old-key-name));\n    }\n  }\n  @return $result;\n}\n\n/// At the time of writing, some color tokens (e.g. disabled state) are defined as a solid color\n/// token and a separate opacity token. This function applies the opacity to the color and drops the\n/// opacity key from the map. Can be removed once b/213331407 is resolved.\n/// @param {Map} $tokens The map of tokens currently being generated\n/// @param {Map} $all-tokens A map of all tokens, including hardcoded values\n/// @param {List} $pairs Pairs of color token names and their opacities. Should be in the shape of\n/// `((color: 'color-key', opacity: 'opacity-key'))`.\n/// @return {Map} The initial tokens with the combined color values.\n@function combine-color-tokens($tokens, $opacity-lookup, $pairs) {\n  $result: $tokens;\n\n  @each $pair in $pairs {\n    $color-key: map.get($pair, color);\n    $opacity-key: map.get($pair, opacity);\n    $color: map.get($tokens, $color-key);\n    $opacity: map.get($opacity-lookup, $opacity-key);\n\n    @if(meta.type-of($color) == 'color') {\n      $result: map.remove($result, $opacity-key);\n      $result: map.set($result, $color-key, rgba($color, $opacity));\n    }\n    @else if($color != null) {\n      $result: map.remove($result, $opacity-key);\n      $combined-color: #{color-mix(in srgb, #{$color} #{($opacity * 100) + '%'}, transparent)};\n      $result: map.set($result, $color-key, $combined-color);\n    }\n  }\n\n  @return $result;\n}\n\n/// Inherited function from MDC that computes which contrast tone to use on top of a color.\n/// This is used only in a narrow set of use cases when generating M2 button tokens to maintain\n/// backwards compatibility.\n/// @param {Color} $value Color for which we're calculating the contrast tone.\n/// @param {Boolean} $is-dark Whether the current theme is dark.\n/// @return {Map} Either `dark` or `light`.\n@function contrast-tone($value, $is-dark) {\n  @if ($value == 'dark') {\n    @return 'light';\n  }\n\n  @if ($value == 'light') {\n    @return 'dark';\n  }\n\n  // Fallback if the app is using a non-color palette (e.g. CSS variable based).\n  @if (meta.type-of($value) != 'color') {\n    @return if($is-dark, 'light', 'dark');\n  }\n\n  $minimum-contrast: 3.1;\n  $light-contrast: _contrast($value, #fff);\n  $dark-contrast: _contrast($value, rgba(0, 0, 0, 0.87));\n\n  @if ($light-contrast < $minimum-contrast) and ($dark-contrast > $light-contrast) {\n    @return 'dark';\n  }\n\n  @return 'light';\n}\n\n@function _linear-channel-value($channel-value) {\n  $normalized-channel-value: math.div($channel-value, 255);\n\n  @if ($normalized-channel-value < 0.03928) {\n    @return math.div($normalized-channel-value, 12.92);\n  }\n\n  @return math.pow(math.div($normalized-channel-value + 0.055, 1.055), 2.4);\n}\n\n// Calculate the luminance for a color.\n// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function _luminance($color) {\n  $red: _linear-channel-value(color.red($color));\n  $green: _linear-channel-value(color.green($color));\n  $blue: _linear-channel-value(color.blue($color));\n\n  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;\n}\n\n// Calculate the contrast ratio between two colors.\n// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n@function _contrast($back, $front) {\n  $back-lum: _luminance($back) + 0.05;\n  $fore-lum: _luminance($front) + 0.05;\n\n  @return math.div(math.max($back-lum, $fore-lum), math.min($back-lum, $fore-lum));\n}\n\n/// Verifies that the token overrides exist and are used in one of the given token maps.\n@mixin _validate-token-overrides($overrides: (), $token-maps) {\n  $valid-token-names: ();\n\n  @each $token-map in $token-maps {\n    @each $name, $value in map.get($token-map, tokens) {\n      @if ($value != null and list.index($valid-token-names, $name) == null) {\n        $valid-token-names: list.append($valid-token-names, $name);\n      }\n    }\n  }\n\n  @each $name in map.keys($overrides) {\n    @if (list.index($valid-token-names, $name) == null) {\n      @error (\n        'Invalid token: \"' + $name + '\"'\n        'Valid tokens include: ' $valid-token-names\n      );\n    }\n  }\n}\n\n/// Picks a submap containing only the given keys out the given map.\n/// @param {Map} $map The map to pick from.\n/// @param {List} $keys The map keys to pick.\n/// @return {Map} A submap containing only the given keys.\n@function _pick($map, $keys) {\n  $result: ();\n  @each $key in $keys {\n    @if map.has-key($map, $key) {\n      $result: map.set($result, $key, map.get($map, $key));\n    }\n  }\n  @return $result;\n}\n\n\n/// Filters keys with a null value out of the map.\n/// @param {Map} $map The map to filter.\n/// @return {Map} The given map with all of the null keys filtered out.\n@function _filter-nulls($map) {\n  $result: ();\n  @each $key, $val in $map {\n    @if $val != null {\n      $result: map.set($result, $key, $val);\n    }\n  }\n  @return $result;\n}\n", "@use './theming/theming';\n@use './theming/inspection';\n@use './theming/validation';\n@use './ripple/ripple-theme';\n@use './option/option-theme';\n@use './option/optgroup-theme';\n@use './selection/pseudo-checkbox/pseudo-checkbox-theme';\n@use './style/sass-utils';\n@use './typography/typography';\n@use './tokens/token-utils';\n@use './tokens/m2/mat/app' as tokens-mat-app;\n@use './tokens/m2/mat/ripple' as tokens-mat-ripple;\n@use './tokens/m2/mat/option' as tokens-mat-option;\n@use './tokens/m2/mat/optgroup' as tokens-mat-optgroup;\n@use './tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use './tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n$_has-inserted-loaded-marker: false;\n\n@mixin _theme-loaded-marker {\n  @if not $_has-inserted-loaded-marker {\n    $_has-inserted-loaded-marker: true !global;\n\n    // Marker that is used to determine whether the user has added a theme to their page.\n    // Needs to be generated at the root, because themes may be nested inside classes.\n    @at-root {\n      .mat-theme-loaded-marker {\n        display: none;\n      }\n    }\n  }\n}\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include ripple-theme.base($theme);\n    @include option-theme.base($theme);\n    @include optgroup-theme.base($theme);\n    @include pseudo-checkbox-theme.base($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-unthemable-tokens());\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include ripple-theme.color($theme);\n    @include option-theme.color($theme);\n    @include optgroup-theme.color($theme);\n    @include pseudo-checkbox-theme.color($theme);\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-app.$prefix,\n        tokens-mat-app.get-color-tokens($theme));\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include option-theme.typography($theme);\n    @include optgroup-theme.typography($theme);\n    @include pseudo-checkbox-theme.typography($theme);\n    @include ripple-theme.typography($theme);\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include option-theme.density($theme);\n    @include optgroup-theme.density($theme);\n    @include pseudo-checkbox-theme.density($theme);\n    @include ripple-theme.density($theme);\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  $app-tokens: tokens-mat-app.get-token-slots();\n  $ripple-tokens: tokens-mat-ripple.get-token-slots();\n  $option-tokens: tokens-mat-option.get-token-slots();\n  $full-pseudo-checkbox-tokens: tokens-mat-full-pseudo-checkbox.get-token-slots();\n  $minimal-pseudo-checkbox-tokens: tokens-mat-minimal-pseudo-checkbox.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-app.$prefix, tokens: $app-tokens),\n    (prefix: tokens-mat-ripple.$prefix, tokens: $ripple-tokens),\n    (prefix: tokens-mat-option.$prefix, tokens: $option-tokens),\n    (prefix: tokens-mat-full-pseudo-checkbox.$prefix, tokens: $full-pseudo-checkbox-tokens),\n    (prefix: tokens-mat-minimal-pseudo-checkbox.$prefix, tokens: $minimal-pseudo-checkbox-tokens),\n  );\n}\n\n// Mixin that renders all of the core styles that depend on the theme.\n@mixin theme($theme, $options...) {\n  // Wrap the sub-theme includes in the duplicate theme styles mixin. This ensures that\n  // there won't be multiple warnings. e.g. if `mat-core-theme` reports a warning, then\n  // the imported themes (such as `mat-ripple-theme`) should not report again.\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-core') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n\n  // The marker is a concrete style no matter which Material version we're targeting.\n  @include _theme-loaded-marker;\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-app-tokens: token-utils.get-tokens-for($tokens, tokens-mat-app.$prefix, $options...);\n  $mat-ripple-tokens: token-utils.get-tokens-for($tokens, tokens-mat-ripple.$prefix, $options...);\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  $mat-optgroup-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-optgroup.$prefix, $options...);\n  $mat-full-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens: token-utils.get-tokens-for($tokens,\n    tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mat-app.$prefix, $mat-app-tokens);\n  @include token-utils.create-token-values(tokens-mat-ripple.$prefix, $mat-ripple-tokens);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n  @include token-utils.create-token-values(tokens-mat-optgroup.$prefix, $mat-optgroup-tokens);\n  @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n    $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n    $mat-minimal-pseudo-checkbox-tokens);\n}\n", "@use 'sass:color';\n@use 'sass:list';\n@use 'sass:map';\n@use 'sass:meta';\n\n/// Whether our theming API is using --sys- variables for color tokens.\n$use-system-color-variables: false;\n\n/// Whether our theming API is using --sys- variables for typography tokens.\n$use-system-typography-variables: false;\n\n/// Include content under the current selector (&) or the document root if there is no current\n/// selector.\n/// @param {String} $root [html] The default root selector to use when there is no current selector.\n/// @output The given content under the current selector, or root selector if there is no current\n///     selector.\n/// @content Content to output under the current selector, or root selector if there is no current\n///     selector.\n@mixin current-selector-or-root($root: html) {\n  @if & {\n    @content;\n  }\n  @else {\n    #{$root} {\n      @content;\n    }\n  }\n}\n\n/// A version of the standard `map.merge` function that takes a variable number of arguments.\n/// Each argument is merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.merge\n/// @return {Map} The combined result of successively calling map.merge with each parameter.\n@function merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.merge($result, $map);\n  }\n  @return $result;\n}\n\n/// A version of the standard `map.deep-merge` function that takes a variable number of arguments.\n/// Each argument is deep-merged into the final result from left to right.\n/// @param {List} $maps The maps to combine with map.deep-merge\n/// @return {Map} The combined result of successively calling map.deep-merge with each parameter.\n@function deep-merge-all($maps...) {\n  $result: ();\n  @each $map in $maps {\n    $result: map.deep-merge($result, $map);\n  }\n  @return $result;\n}\n\n/// Coerces the given value to a list, by converting any non-list value into a single-item list.\n/// This should be used when dealing with user-passed lists of args to avoid confusing errors,\n/// since Sass treats `($x)` as equivalent to `$x`.\n/// @param {Any} $value The value to coerce to a list.\n/// @return {List} The original $value if it was a list, otherwise a single-item list containing\n///     $value.\n@function coerce-to-list($value) {\n  @return if(meta.type-of($value) != 'list', ($value,), $value);\n}\n\n/// A version of the Sass `color.change` function that is safe ot use with CSS variables.\n@function safe-color-change($color, $args...) {\n  $args: meta.keywords($args);\n  @if (meta.type-of($color) == 'color') {\n    @return color.change($color, $args...);\n  }\n  @else if ($color != null and map.get($args, alpha) != null and $use-system-color-variables) {\n    $opacity: map.get($args, alpha);\n    @return #{color-mix(in srgb, #{$color} #{($opacity * 100) + '%'}, transparent)};\n  }\n  @return $color;\n}\n\n/// Gets the given arguments as a map of keywords and validates that only supported arguments were\n/// passed.\n/// @param {ArgList} $args The arguments to convert to a keywords map.\n/// @param {List} $supported-args The supported argument names.\n/// @return {Map} The $args as a map of argument name to argument value.\n@function validate-keyword-args($args, $supported-args) {\n  @if list.length($args) > 0 {\n    @error #{'Expected keyword args, but got positional args: '}#{$args};\n  }\n  $kwargs: meta.keywords($args);\n  @each $arg, $v in $kwargs {\n    @if list.index($supported-args, $arg) == null {\n      @error #{'Unsupported argument '}#{$arg}#{'. Valid arguments are: '}#{$supported-args};\n    }\n  }\n  @return $kwargs;\n}\n", "@use '../tokens/m2/mat/option' as tokens-mat-option;\n@use '../tokens/token-utils';\n@use '../style/sass-utils';\n@use '../theming/theming';\n@use '../theming/inspection';\n@use '../theming/validation';\n@use '../typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-option.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme));\n    }\n\n    .mat-accent {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, accent));\n    }\n\n    .mat-warn {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-option.$prefix,\n        tokens-mat-option.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-option.$prefix, tokens: tokens-mat-option.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected option: primary, secondary,\n///      tertiary, or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-option') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-option-tokens: token-utils.get-tokens-for($tokens, tokens-mat-option.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-option.$prefix, $mat-option-tokens);\n}\n", "@use '../../theming/theming';\n@use '../../theming/inspection';\n@use '../../theming/validation';\n@use '../../style/sass-utils';\n@use '../../tokens/token-utils';\n@use '../../tokens/m2/mat/full-pseudo-checkbox' as tokens-mat-full-pseudo-checkbox;\n@use '../../tokens/m2/mat/minimal-pseudo-checkbox' as tokens-mat-minimal-pseudo-checkbox;\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-full-pseudo-checkbox.$prefix,\n      tokens-mat-full-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n    @include token-utils.create-token-values(tokens-mat-minimal-pseudo-checkbox.$prefix,\n      tokens-mat-minimal-pseudo-checkbox.get-color-tokens($theme, $palette-name));\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-full-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-full-pseudo-checkbox.$prefix, $options...);\n  $mat-minimal-pseudo-checkbox-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-minimal-pseudo-checkbox.$prefix, $options...);\n  @include token-utils.create-token-values(\n      tokens-mat-full-pseudo-checkbox.$prefix, $mat-full-pseudo-checkbox-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-minimal-pseudo-checkbox.$prefix, $mat-minimal-pseudo-checkbox-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $full-pseudo-checkbox-tokens: tokens-mat-full-pseudo-checkbox.get-token-slots();\n  $minimal-pseudo-checkbox-tokens: tokens-mat-minimal-pseudo-checkbox.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-full-pseudo-checkbox.$prefix, tokens: $full-pseudo-checkbox-tokens),\n    (prefix: tokens-mat-minimal-pseudo-checkbox.$prefix, tokens: $minimal-pseudo-checkbox-tokens),\n  );\n}\n\n/// Outputs color theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-primary {\n      @include _palette-styles($theme, primary);\n    }\n\n    // Default to the accent color. Note that the pseudo checkboxes are meant to inherit the\n    // theme from their parent, rather than implementing their own theming, which is why we\n    // don't attach to the `mat-*` classes. Also note that this needs to be below `.mat-primary`\n    // in order to allow for the color to be overwritten if the checkbox is inside a parent that\n    // has `mat-accent` and is placed inside another parent that has `mat-primary`.\n    @include _palette-styles($theme, accent);\n    .mat-accent {\n      @include _palette-styles($theme, accent);\n    }\n\n    .mat-warn {\n      @include _palette-styles($theme, warn);\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-pseudo-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the pseudo-checkbox: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-pseudo-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/linear-progress' as tokens-mdc-linear-progress;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-linear-progress.$prefix,\n        tokens-mdc-linear-progress.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mdc-linear-progress.$prefix,\n    tokens-mdc-linear-progress.get-color-tokens($theme, $palette-name)\n  );\n}\n\n/// Outputs color theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-progress-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {}\n\n\n/// Outputs density theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $linear-progress-tokens: tokens-mdc-linear-progress.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-linear-progress.$prefix, tokens: $linear-progress-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-bar.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the progress bar: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-bar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $tokens: token-utils.get-tokens-for($tokens, tokens-mdc-linear-progress.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-linear-progress.$prefix, $tokens);\n}\n", "@use '../core/tokens/m2/mdc/filled-text-field' as tokens-mdc-filled-text-field;\n@use '../core/tokens/m2/mdc/outlined-text-field' as tokens-mdc-outlined-text-field;\n@use '../core/tokens/m2/mat/form-field' as tokens-mat-form-field;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-form-field.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n          tokens-mdc-filled-text-field.$prefix,\n          tokens-mdc-filled-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mdc-outlined-text-field.$prefix,\n          tokens-mdc-outlined-text-field.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n          tokens-mat-form-field.$prefix,\n          tokens-mat-form-field.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-color-tokens($theme));\n    }\n\n    .mat-mdc-form-field.mat-accent {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, accent));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-mdc-form-field.mat-warn {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.private-get-color-palette-color-tokens($theme, warn));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n        tokens-mdc-filled-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n        tokens-mdc-outlined-text-field.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-form-field.$prefix,\n        tokens-mat-form-field.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $filled-text-field-tokens: tokens-mdc-filled-text-field.get-token-slots();\n  $outlined-text-field-tokens: tokens-mdc-outlined-text-field.get-token-slots();\n  $form-field-tokens: tokens-mat-form-field.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-filled-text-field.$prefix, tokens: $filled-text-field-tokens),\n    (prefix: tokens-mdc-outlined-text-field.$prefix, tokens: $outlined-text-field-tokens),\n    (prefix: tokens-mat-form-field.$prefix, tokens: $form-field-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-form-field.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the form field: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-form-field') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-filled-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-filled-text-field.$prefix, $options...);\n  $mdc-outlined-text-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-outlined-text-field.$prefix, $options...);\n  $mat-form-field-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mat-form-field.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-filled-text-field.$prefix,\n    $mdc-filled-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mdc-outlined-text-field.$prefix,\n    $mdc-outlined-text-field-tokens);\n  @include token-utils.create-token-values(tokens-mat-form-field.$prefix, $mat-form-field-tokens);\n}\n", "@use '../core/tokens/m2/mat/select' as tokens-mat-select;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-select.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      $mat-tokens: tokens-mat-select.get-unthemable-tokens();\n      @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-tokens);\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-color-tokens($theme));\n\n      .mat-mdc-form-field.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, accent));\n      }\n\n      .mat-mdc-form-field.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-select.$prefix,\n          tokens-mat-select.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-select.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-select.$prefix,\n        tokens-mat-select.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-select.$prefix, tokens: tokens-mat-select.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the select arrow: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-select') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-select-tokens: token-utils.get-tokens-for($tokens, tokens-mat-select.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-select.$prefix, $mat-select-tokens);\n}\n", "@use 'sass:color';\n@use '../core/tokens/m2/mdc/chip' as tokens-mdc-chip;\n@use '../core/tokens/m2/mat/chip' as tokens-mat-chip;\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-chips.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme));\n\n      &.mat-mdc-chip-selected,\n      &.mat-mdc-chip-highlighted {\n        &.mat-primary {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, primary));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, primary));\n        }\n\n        &.mat-accent {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, accent));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include token-utils.create-token-values(\n            tokens-mdc-chip.$prefix, tokens-mdc-chip.get-color-tokens($theme, warn));\n          @include token-utils.create-token-values(\n            tokens-mat-chip.$prefix, tokens-mat-chip.get-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-chip.mat-mdc-standard-chip {\n      @include token-utils.create-token-values(\n        tokens-mdc-chip.$prefix, tokens-mdc-chip.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-chip.$prefix, tokens-mat-chip.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-chip.$prefix, tokens: tokens-mdc-chip.get-token-slots()),\n    (prefix: tokens-mat-chip.$prefix, tokens: tokens-mat-chip.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-chips.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the selected chip: primary, secondary, tertiary,\n///      or error (If not specified, default secondary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-chips') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-chip.$prefix, $options...);\n  $mat-chip-tokens: token-utils.get-tokens-for($tokens, tokens-mat-chip.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-chip.$prefix, $mdc-chip-tokens);\n  @include token-utils.create-token-values(tokens-mat-chip.$prefix, $mat-chip-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/switch' as tokens-mat-switch;\n@use '../core/tokens/m2/mdc/switch' as tokens-mdc-switch;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-unthemable-tokens());\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-unthemable-tokens());\n      }\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    $mdc-tokens: tokens-mdc-switch.get-color-tokens($theme);\n\n    // Add values for MDC slide toggles tokens\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-color-tokens($theme));\n\n      // TODO(wagnermaciel): Use our token system to define this css variable.\n      --mdc-switch-disabled-label-text-color: #{inspection.get-theme-color(\n          $theme,\n          foreground,\n          disabled-text\n        )};\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-color-tokens($theme));\n\n        // Change the color palette related tokens to accent or warn if applicable\n        &.mat-accent {\n          @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n            tokens-mdc-switch.private-get-color-palette-color-tokens($theme, accent));\n        }\n\n        &.mat-warn {\n          @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n            tokens-mdc-switch.private-get-color-palette-color-tokens($theme, warn));\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-typography-tokens($theme));\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-typography-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-slide-toggle.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-switch.$prefix,\n        tokens-mdc-switch.get-density-tokens($theme));\n\n      .mat-mdc-slide-toggle {\n        @include token-utils.create-token-values(tokens-mat-switch.$prefix,\n          tokens-mat-switch.get-density-tokens($theme));\n      }\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mat-switch.$prefix,\n      tokens: tokens-mat-switch.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mdc-switch.$prefix,\n      tokens: tokens-mdc-switch.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slide-toggle: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slide-toggle') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-switch.$prefix, $options...);\n  // Don't pass $options here, since the mat-switch doesn't support color options,\n  // only the mdc-switch does.\n  $mat-switch-tokens: token-utils.get-tokens-for($tokens, tokens-mat-switch.$prefix);\n\n  @include token-utils.create-token-values(tokens-mdc-switch.$prefix, $mdc-switch-tokens);\n  @include token-utils.create-token-values(tokens-mat-switch.$prefix, $mat-switch-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mat/radio' as tokens-mat-radio;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-radio.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    .mat-mdc-radio-button {\n      &.mat-primary {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme, primary));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, primary));\n      }\n\n      &.mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme));\n      }\n\n      &.mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n          tokens-mdc-radio.get-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n          tokens-mat-radio.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-radio.$prefix,\n        tokens-mdc-radio.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-radio.$prefix,\n        tokens-mat-radio.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mdc-radio.$prefix,\n      tokens: tokens-mdc-radio.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mat-radio.$prefix,\n      tokens: tokens-mat-radio.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-radio.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the radio button: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-radio') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-radio.$prefix, $options...);\n  $mat-radio-tokens: token-utils.get-tokens-for($tokens, tokens-mat-radio.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-radio.$prefix, $mdc-radio-tokens);\n  @include token-utils.create-token-values(tokens-mat-radio.$prefix, $mat-radio-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/slider' as tokens-mat-slider;\n@use '../core/tokens/m2/mdc/slider' as tokens-mdc-slider;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-slider.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n        tokens-mat-slider.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-color-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n        tokens-mat-slider.get-color-tokens($theme));\n\n      .mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n          tokens-mdc-slider.private-get-color-palette-color-tokens($theme, accent));\n        @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n          tokens-mdc-slider.private-get-color-palette-color-tokens($theme, warn));\n        @include token-utils.create-token-values(tokens-mat-slider.$prefix,\n          tokens-mat-slider.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n\n/// Outputs typography theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-typography-tokens($theme));\n    }\n  }\n}\n\n\n/// Outputs density theme styles for the mat-slider.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-slider.$prefix,\n        tokens-mdc-slider.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-slider.$prefix, tokens: tokens-mat-slider.get-token-slots()),\n    (prefix: tokens-mdc-slider.$prefix, tokens: tokens-mdc-slider.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-option.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the slider: primary, secondary, tertiary,\n///     or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-slider') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-slider.$prefix, $options...);\n  $mat-slider-tokens: token-utils.get-tokens-for($tokens, tokens-mat-slider.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-slider.$prefix, $mdc-slider-tokens);\n  @include token-utils.create-token-values(tokens-mat-slider.$prefix, $mat-slider-tokens);\n}\n", "@use 'sass:map';\n\n@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/list' as tokens-mat-list;\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mdc/radio' as tokens-mdc-radio;\n@use '../core/tokens/m2/mdc/list' as tokens-mdc-list;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n@mixin base($theme) {\n  // Add default values for tokens not related to color, typography, or density.\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-color-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-color-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include token-utils.create-token-values(\n        tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, primary));\n    }\n\n    .mat-accent {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include token-utils.create-token-values(\n          tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, accent));\n      }\n    }\n\n    .mat-warn {\n      .mdc-list-item__start,\n      .mdc-list-item__end {\n        @include token-utils.create-token-values(\n          tokens-mdc-radio.$prefix, tokens-mdc-radio.get-color-tokens($theme, warn));\n      }\n    }\n\n    .mat-mdc-list-option {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, primary));\n    }\n    .mat-mdc-list-option.mat-accent {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, accent));\n    }\n    .mat-mdc-list-option.mat-warn {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix, tokens-mdc-checkbox.get-color-tokens($theme, warn));\n    }\n\n    // There is no token for activated color on nav list.\n    // TODO(mmalerba): Add a token to MDC or make a custom one.\n    .mat-mdc-list-base.mat-mdc-list-base {\n      .mdc-list-item--selected,\n      .mdc-list-item--activated {\n        .mdc-list-item__primary-text,\n        .mdc-list-item__start {\n          color: inspection.get-theme-color($theme, primary);\n        }\n      }\n    }\n\n    // TODO(mmalerba): Leaking styles from the old MDC list mixins used in other components can\n    //  cause opacity issues, so we need this override for now. We can remove it when all\n    //  Angular Material components stop using the old MDC mixins.\n    .mat-mdc-list-base .mdc-list-item--disabled {\n      .mdc-list-item__start,\n      .mdc-list-item__content,\n      .mdc-list-item__end {\n        opacity: 1;\n      }\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $density-scale: inspection.get-theme-density($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-density-tokens($theme));\n    }\n\n    .mdc-list-item__start,\n    .mdc-list-item__end {\n      @include token-utils.create-token-values(\n        tokens-mdc-radio.$prefix, tokens-mdc-radio.get-density-tokens($theme));\n    }\n\n    // TODO(mmalerba): This is added to maintain the same style MDC used prior to the token-based\n    //  API, to avoid screenshot diffs. We should remove it in favor of following MDC's current\n    //  style, or add custom tokens for it.\n    .mat-mdc-list-item {\n      &.mdc-list-item--with-leading-avatar,\n      &.mdc-list-item--with-leading-checkbox,\n      &.mdc-list-item--with-leading-icon {\n        &.mdc-list-item--with-one-line {\n          height: map.get((\n            0: 56px,\n            -1: 52px,\n            -2: 48px,\n            -3: 44px,\n            -4: 40px,\n            -5: 40px,\n          ), $density-scale);\n        }\n\n        &.mdc-list-item--with-two-lines {\n          height: map.get((\n            0: 72px,\n            -1: 68px,\n            -2: 64px,\n            -3: 60px,\n            -4: 56px,\n            -5: 56px,\n          ), $density-scale);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-list.$prefix, tokens-mdc-list.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mat-list.$prefix, tokens-mat-list.get-typography-tokens($theme));\n    }\n\n    // MDC does not have tokens for the subheader.\n    // TODO(mmalerba): Discuss with MDC about adding them, or create custom tokens.\n    .mdc-list-group__subheader {\n      font: inspection.get-theme-typography($theme, subtitle-1, font);\n      letter-spacing: inspection.get-theme-typography($theme, subtitle-1, letter-spacing);\n    }\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-list.$prefix, tokens: tokens-mat-list.get-token-slots()),\n    (prefix: tokens-mdc-list.$prefix, tokens: tokens-mdc-list.get-token-slots()),\n  );\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-list') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-list-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-list.$prefix);\n  $mat-list-tokens: token-utils.get-tokens-for($tokens, tokens-mat-list.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-list.$prefix, $mdc-list-tokens);\n  @include token-utils.create-token-values(tokens-mat-list.$prefix, $mat-list-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/tokens/m2/mdc/secondary-navigation-tab' as tokens-mdc-secondary-navigation-tab;\n@use '../core/tokens/m2/mdc/tab-indicator' as tokens-mdc-tab-indicator;\n@use '../core/tokens/m2/mat/tab-header' as tokens-mat-tab-header;\n@use '../core/tokens/m2/mat/tab-header-with-background' as tokens-mat-tab-header-with-background;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/token-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-tab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-tab-header.$prefix, tokens-mat-tab-header.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    .mat-mdc-tab-group, .mat-mdc-tab-nav-bar {\n      @include _palette-styles($theme, primary);\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n\n      &.mat-background-primary {\n        @include _background-styles($theme, primary);\n      }\n\n      &.mat-background-accent {\n        @include _background-styles($theme, accent);\n      }\n\n      &.mat-background-warn {\n        @include _background-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin _background-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n    tokens-mat-tab-header-with-background.get-color-tokens($theme, $palette-name));\n}\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mdc-secondary-navigation-tab.$prefix,\n    tokens-mdc-secondary-navigation-tab.get-color-tokens($theme, $palette-name)\n  );\n  @include token-utils.create-token-values(\n    tokens-mdc-tab-indicator.$prefix,\n    tokens-mdc-tab-indicator.get-color-tokens($theme, $palette-name));\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n   tokens-mat-tab-header.get-color-tokens($theme, $palette-name));\n}\n\n/// Outputs typography theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    .mat-mdc-tab-header {\n      @include token-utils.create-token-values(\n        tokens-mdc-secondary-navigation-tab.$prefix,\n        tokens-mdc-secondary-navigation-tab.get-density-tokens($theme));\n      @include token-utils.create-token-values(\n        tokens-mdc-tab-indicator.$prefix, tokens-mdc-tab-indicator.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header.$prefix,\n        tokens-mat-tab-header.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-tab-header-with-background.$prefix,\n        tokens-mat-tab-header-with-background.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $tab-tokens: tokens-mdc-secondary-navigation-tab.get-token-slots();\n  $tab-indicator-tokens: tokens-mdc-tab-indicator.get-token-slots();\n  $tab-header-tokens: tokens-mat-tab-header.get-token-slots();\n  $tab-header-with-background-tokens: tokens-mat-tab-header-with-background.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-secondary-navigation-tab.$prefix, tokens: $tab-tokens),\n    (prefix: tokens-mdc-tab-indicator.$prefix, tokens: $tab-indicator-tokens),\n    (prefix: tokens-mat-tab-header.$prefix, tokens: $tab-header-tokens),\n    (\n      prefix: tokens-mat-tab-header-with-background.$prefix,\n      tokens: $tab-header-with-background-tokens,\n    ),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-tab.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the tab indicator: primary, secondary,\n///      tertiary, or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-tabs') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-tab-indicator-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-tab-indicator.$prefix, $options...);\n  $mat-tab-header-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mat-tab-header.$prefix, $options...);\n  // Don't pass $options here, because the mdc-tab doesn't have color variants,\n  // only the mdc-tab-indicator and mat-tab-header do.\n  $mdc-secondary-navigation-tab-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-secondary-navigation-tab.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-secondary-navigation-tab.$prefix,\n    $mdc-secondary-navigation-tab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-tab-indicator.$prefix,\n    $mdc-tab-indicator-tokens);\n  @include token-utils.create-token-values(tokens-mat-tab-header.$prefix, $mat-tab-header-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/checkbox' as tokens-mdc-checkbox;\n@use '../core/tokens/m2/mat/checkbox' as tokens-mat-checkbox;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-checkbox.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-unthemable-tokens()\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-unthemable-tokens()\n      );\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-color-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-color-tokens($theme)\n      );\n    }\n\n    .mat-mdc-checkbox {\n      &.mat-primary {\n        @include token-utils.create-token-values(\n          tokens-mdc-checkbox.$prefix,\n          tokens-mdc-checkbox.get-color-tokens($theme, primary));\n      }\n\n      &.mat-warn {\n        @include token-utils.create-token-values(\n          tokens-mdc-checkbox.$prefix,\n          tokens-mdc-checkbox.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-typography-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-typography-tokens($theme)\n      );\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  $density-scale: inspection.get-theme-density($theme);\n\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  } @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-checkbox.$prefix,\n        tokens-mdc-checkbox.get-density-tokens($theme)\n      );\n      @include token-utils.create-token-values(\n        tokens-mat-checkbox.$prefix,\n        tokens-mat-checkbox.get-density-tokens($theme)\n      );\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (\n      prefix: tokens-mat-checkbox.$prefix,\n      tokens: tokens-mat-checkbox.get-token-slots(),\n    ),\n    (\n      prefix: tokens-mdc-checkbox.$prefix,\n      tokens: tokens-mdc-checkbox.get-token-slots(),\n    )\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the checkbox: primary, secondary, tertiary, or\n///     error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-checkbox') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    } @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n    'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector'\n  );\n  $mdc-checkbox-tokens: token-utils.get-tokens-for(\n    $tokens,\n    tokens-mdc-checkbox.$prefix,\n    $options...\n  );\n  // Don't pass $options here, since the mdc-checkbox doesn't support color options,\n  // only the mdc-checkbox does.\n  $mat-checkbox-tokens: token-utils.get-tokens-for($tokens, tokens-mat-checkbox.$prefix);\n  @include token-utils.create-token-values(tokens-mdc-checkbox.$prefix, $mdc-checkbox-tokens);\n  @include token-utils.create-token-values(tokens-mat-checkbox.$prefix, $mat-checkbox-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mdc/filled-button' as tokens-mdc-filled-button;\n@use '../core/tokens/m2/mat/filled-button' as tokens-mat-filled-button;\n@use '../core/tokens/m2/mdc/outlined-button' as tokens-mdc-outlined-button;\n@use '../core/tokens/m2/mat/outlined-button' as tokens-mat-outlined-button;\n@use '../core/tokens/m2/mdc/protected-button' as tokens-mdc-protected-button;\n@use '../core/tokens/m2/mat/protected-button' as tokens-mat-protected-button;\n@use '../core/tokens/m2/mdc/text-button' as tokens-mdc-text-button;\n@use '../core/tokens/m2/mat/text-button' as tokens-mat-text-button;\n@use '../core/style/sass-utils';\n\n@mixin _text-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-text-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-text-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-text-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-text-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-tokens);\n}\n\n@mixin _filled-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-filled-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-filled-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-filled-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-filled-button.$prefix, $mat-tokens);\n}\n\n@mixin _protected-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-protected-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-protected-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-protected-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-protected-button.$prefix, $mat-tokens);\n}\n\n@mixin _outlined-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-outlined-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-outlined-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-outlined-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix, $mat-tokens);\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-text-button.$prefix, $options...);\n  $mdc-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-protected-button.$prefix, $options...);\n  $mdc-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-filled-button.$prefix, $options...);\n  $mdc-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mdc-outlined-button.$prefix, $options...);\n  $mat-text-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-text-button.$prefix, $options...);\n  $mat-protected-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-protected-button.$prefix, $options...);\n  $mat-filled-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-filled-button.$prefix, $options...);\n  $mat-outlined-button-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-outlined-button.$prefix, $options...);\n\n  @include token-utils.create-token-values(tokens-mdc-text-button.$prefix, $mdc-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mdc-protected-button.$prefix, $mdc-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mdc-filled-button.$prefix, $mdc-filled-button-tokens);\n  @include token-utils.create-token-values(\n    tokens-mdc-outlined-button.$prefix, $mdc-outlined-button-tokens);\n  @include token-utils.create-token-values(tokens-mat-text-button.$prefix, $mat-text-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-protected-button.$prefix, $mat-protected-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-filled-button.$prefix, $mat-filled-button-tokens);\n  @include token-utils.create-token-values(\n      tokens-mat-outlined-button.$prefix, $mat-outlined-button-tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-button.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-unthemable-tokens());\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-unthemable-tokens());\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _text-button-variant($theme, null);\n      @include _filled-button-variant($theme, null);\n      @include _protected-button-variant($theme, null);\n      @include _outlined-button-variant($theme, null);\n    }\n\n    .mat-mdc-button {\n      &.mat-primary {\n        @include _text-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _text-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _text-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-unelevated-button {\n      &.mat-primary {\n        @include _filled-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _filled-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _filled-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-raised-button {\n      &.mat-primary {\n        @include _protected-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _protected-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _protected-button-variant($theme, warn);\n      }\n    }\n\n    .mat-mdc-outlined-button {\n      &.mat-primary {\n        @include _outlined-button-variant($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _outlined-button-variant($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _outlined-button-variant($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-typography-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-text-button.$prefix,\n        tokens-mdc-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-filled-button.$prefix,\n        tokens-mdc-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-protected-button.$prefix,\n        tokens-mdc-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mdc-outlined-button.$prefix,\n        tokens-mdc-outlined-button.get-density-tokens($theme));\n\n      @include token-utils.create-token-values(tokens-mat-text-button.$prefix,\n        tokens-mat-text-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-filled-button.$prefix,\n        tokens-mat-filled-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-protected-button.$prefix,\n        tokens-mat-protected-button.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-outlined-button.$prefix,\n        tokens-mat-outlined-button.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $mdc-filled-button-tokens: tokens-mdc-filled-button.get-token-slots();\n  $mat-filled-button-tokens: tokens-mat-filled-button.get-token-slots();\n  $mdc-outlined-button-tokens: tokens-mdc-outlined-button.get-token-slots();\n  $mat-outlined-button-tokens: tokens-mat-outlined-button.get-token-slots();\n  $mdc-protected-button-tokens: tokens-mdc-protected-button.get-token-slots();\n  $mat-protected-button-tokens: tokens-mat-protected-button.get-token-slots();\n  $mdc-text-button-tokens: tokens-mdc-text-button.get-token-slots();\n  $mat-text-button-tokens: tokens-mat-text-button.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-filled-button.$prefix, tokens: $mdc-filled-button-tokens),\n    (prefix: tokens-mat-filled-button.$prefix, tokens: $mat-filled-button-tokens),\n    (prefix: tokens-mdc-outlined-button.$prefix, tokens: $mdc-outlined-button-tokens),\n    (prefix: tokens-mat-outlined-button.$prefix, tokens: $mat-outlined-button-tokens),\n    (prefix: tokens-mdc-protected-button.$prefix, tokens: $mdc-protected-button-tokens),\n    (prefix: tokens-mat-protected-button.$prefix, tokens: $mat-protected-button-tokens),\n    (prefix: tokens-mdc-text-button.$prefix, tokens: $mdc-text-button-tokens),\n    (prefix: tokens-mat-text-button.$prefix, tokens: $mat-text-button-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the button: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n", "@use 'sass:map';\n@use 'sass:math';\n@use '../core/tokens/m2/mdc/icon-button' as tokens-mdc-icon-button;\n@use '../core/tokens/m2/mat/icon-button' as tokens-mat-icon-button;\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n\n\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    // Add default values for tokens not related to color, typography, or density.\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix,\n        tokens-mdc-icon-button.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _icon-button-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-icon-button.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-icon-button.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-icon-button.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-icon-button.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n/// $color-variant: The color variant to use for the button: primary, secondary, tertiary, or error.\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _icon-button-variant($theme, null);\n\n      .mat-mdc-icon-button {\n        &.mat-primary {\n          @include _icon-button-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _icon-button-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _icon-button-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    $icon-size: 24px;\n    $density-scale: inspection.get-theme-density($theme);\n    $size-map: (\n      0: 48px,\n      -1: 44px,\n      -2: 40px,\n      -3: 36px,\n      -4: 32px,\n      -5: 28px,\n    );\n    $calculated-size: map.get($size-map, $density-scale);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon-button.$prefix,\n        tokens-mat-icon-button.get-density-tokens($theme));\n    }\n\n    // Use `mat-mdc-button-base` to increase the specificity over the button's structural styles.\n    .mat-mdc-icon-button.mat-mdc-button-base {\n      // Match the styles that used to be present. This is necessary for backwards\n      // compat to match the previous implementations selector count (two classes).\n      --mdc-icon-button-state-layer-size: #{$calculated-size};\n\n      // TODO: Switch calculated-size to \"var(--mdc-icon-button-state-layer-size)\"\n      // Currently fails validation because the variable is \"undefined\"\n      // in the sass stack.\n      // TODO: Switch icon-size to \"var(--mdc-icon-button-icon-size)\". Currently\n      // fails validation because the variable is \"undefined\" in the sass stack.\n      width: var(--mdc-icon-button-state-layer-size);\n      height: var(--mdc-icon-button-state-layer-size);\n      padding: math.div($calculated-size - $icon-size, 2);\n    }\n  }\n}\n\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-icon-button.$prefix, tokens: tokens-mdc-icon-button.get-token-slots()),\n    (prefix: tokens-mat-icon-button.$prefix, tokens: tokens-mat-icon-button.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon-button.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n/// $color-variant: The color variant to use for the button: primary, secondary, tertiary, or error.\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon-button') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mdc-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-icon-button.$prefix, $options...);\n    $mat-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon-button.$prefix, $options...);\n\n    @include token-utils.create-token-values(tokens-mdc-icon-button.$prefix, $mdc-tokens);\n    @include token-utils.create-token-values(tokens-mat-icon-button.$prefix, $mat-tokens);\n  }\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mdc/fab' as tokens-mdc-fab;\n@use '../core/tokens/m2/mdc/fab-small' as tokens-mdc-fab-small;\n@use '../core/tokens/m2/mdc/extended-fab' as tokens-mdc-extended-fab;\n@use '../core/tokens/m2/mat/fab' as tokens-mat-fab;\n@use '../core/tokens/m2/mat/fab-small' as tokens-mat-fab-small;\n@use '../core/tokens/token-utils';\n@use '../core/typography/typography';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-fab.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(\n        tokens-mdc-fab.$prefix, tokens-mdc-fab.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-fab-small.$prefix, tokens-mdc-fab-small.get-unthemable-tokens());\n      @include token-utils.create-token-values(\n        tokens-mdc-extended-fab.$prefix, tokens-mdc-extended-fab.get-unthemable-tokens());\n    }\n  }\n}\n\n@mixin _fab-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-fab.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-tokens);\n}\n\n@mixin _fab-small-variant($theme, $palette) {\n  $mdc-tokens: if($palette,\n    tokens-mdc-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mdc-fab-small.get-color-tokens($theme)\n  );\n\n  $mat-tokens: if($palette,\n    tokens-mat-fab-small.private-get-color-palette-color-tokens($theme, $palette),\n    tokens-mat-fab-small.get-color-tokens($theme)\n  );\n\n  @include token-utils.create-token-values(tokens-mdc-fab-small.$prefix, $mdc-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-tokens);\n}\n\n/// Outputs color theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include _fab-variant($theme, null);\n      @include _fab-small-variant($theme, null);\n      @include token-utils.create-token-values(\n        tokens-mdc-extended-fab.$prefix, tokens-mdc-extended-fab.get-color-tokens($theme));\n\n      .mat-mdc-fab {\n        &.mat-primary {\n          @include _fab-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-variant($theme, warn);\n        }\n      }\n\n      .mat-mdc-mini-fab {\n        &.mat-primary {\n          @include _fab-small-variant($theme, primary);\n        }\n\n        &.mat-accent {\n          @include _fab-small-variant($theme, accent);\n        }\n\n        &.mat-warn {\n          @include _fab-small-variant($theme, warn);\n        }\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-extended-fab.$prefix,\n        tokens-mdc-extended-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-typography-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-fab.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-fab.$prefix,\n        tokens-mat-fab.get-density-tokens($theme));\n      @include token-utils.create-token-values(tokens-mat-fab-small.$prefix,\n        tokens-mat-fab-small.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-fab.$prefix, tokens: tokens-mdc-fab.get-token-slots()),\n    (prefix: tokens-mdc-fab-small.$prefix, tokens: tokens-mdc-fab-small.get-token-slots()),\n    (prefix: tokens-mdc-extended-fab.$prefix, tokens: tokens-mdc-extended-fab.get-token-slots()),\n    (prefix: tokens-mat-fab.$prefix, tokens: tokens-mat-fab.get-token-slots()),\n    (prefix: tokens-mat-fab-small.$prefix, tokens: tokens-mat-fab-small.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-checkbox.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the fab: primary, secondary, or tertiary\n///     (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-fab') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-extended-fab-tokens: token-utils.get-tokens-for(\n      $tokens, tokens-mdc-extended-fab.$prefix, $options...);\n  $mdc-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab.$prefix, $options...);\n  $mdc-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mdc-fab-small.$prefix,\n    $options...);\n  $mat-fab-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab.$prefix, $options...);\n  $mat-fab-small-tokens: token-utils.get-tokens-for($tokens, tokens-mat-fab-small.$prefix,\n    $options...);\n    @include token-utils.create-token-values(tokens-mdc-extended-fab.$prefix,\n      $mdc-extended-fab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-fab.$prefix, $mdc-fab-tokens);\n  @include token-utils.create-token-values(tokens-mdc-fab-small.$prefix, $mdc-fab-small-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab.$prefix, $mat-fab-tokens);\n  @include token-utils.create-token-values(tokens-mat-fab-small.$prefix, $mat-fab-small-tokens);\n}\n", "@use '../core/style/sass-utils';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mdc/circular-progress' as tokens-mdc-circular-progress;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n        tokens-mdc-circular-progress.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n        tokens-mdc-circular-progress.get-color-tokens($theme, primary));\n\n      .mat-accent {\n        @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n          tokens-mdc-circular-progress.get-color-tokens($theme, accent));\n      }\n\n      .mat-warn {\n        @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n          tokens-mdc-circular-progress.get-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n}\n\n/// Outputs density theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  $circular-progress-tokens: tokens-mdc-circular-progress.get-token-slots();\n\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mdc-circular-progress.$prefix, tokens: $circular-progress-tokens),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-progress-spinner.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the spinner: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-progress-spinner') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mdc-circular-progress-tokens:\n    token-utils.get-tokens-for($tokens, tokens-mdc-circular-progress.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mdc-circular-progress.$prefix,\n    $mdc-circular-progress-tokens);\n}\n", "@use 'sass:color';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/badge' as tokens-mat-badge;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-badge.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-color-tokens($theme));\n    }\n\n    .mat-badge-accent {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, accent));\n    }\n\n    .mat-badge-warn {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.private-get-color-palette-color-tokens($theme, warn));\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-badge.$prefix,\n        tokens-mat-badge.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-badge.$prefix, tokens: tokens-mat-badge.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-badge.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the badge: primary, secondary, tertiary,\n///      or error (If not specified, default error color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-badge') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-badge-tokens: token-utils.get-tokens-for($tokens, tokens-mat-badge.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-badge.$prefix, $mat-badge-tokens);\n}\n", "@use 'sass:color';\n@use 'sass:map';\n@use '../core/tokens/m2/mat/datepicker' as tokens-mat-datepicker;\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n@use '../core/typography/typography';\n@use '../button/icon-button-theme';\n\n// TODO(crisbeto): these variables aren't used anymore and should be removed.\n$selected-today-box-shadow-width: 1px;\n$selected-fade-amount: 0.6;\n$range-fade-amount: 0.2;\n$today-fade-amount: 0.2;\n$calendar-body-font-size: 13px !default;\n$calendar-weekday-table-font-size: 11px !default;\n\n@mixin _calendar-color($theme, $palette-name) {\n  $palette-color: inspection.get-theme-color($theme, $palette-name);\n  $range-color: tokens-mat-datepicker.private-get-range-background-color($palette-color);\n  $range-tokens: tokens-mat-datepicker.get-range-color-tokens($range-color);\n  $calendar-tokens:\n    tokens-mat-datepicker.private-get-calendar-color-palette-color-tokens($theme, $palette-name);\n\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n    map.merge($calendar-tokens, $range-tokens));\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-datepicker.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-unthemable-tokens());\n    }\n  }\n}\n\n/// Outputs color theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-color-tokens($theme));\n    }\n\n    .mat-datepicker-content {\n      &.mat-accent {\n        @include _calendar-color($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _calendar-color($theme, warn);\n      }\n    }\n\n    .mat-datepicker-toggle-active {\n      &.mat-accent {\n        $accent-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, accent);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $accent-tokens);\n      }\n\n      &.mat-warn {\n        $warn-tokens:\n          tokens-mat-datepicker.private-get-toggle-color-palette-color-tokens($theme, warn);\n        @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $warn-tokens);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-datepicker.$prefix,\n        tokens-mat-datepicker.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin date-range-colors(\n  $range-color,\n  $comparison-color: tokens-mat-datepicker.$private-default-comparison-color,\n  $overlap-color: tokens-mat-datepicker.$private-default-overlap-color,\n  $overlap-selected-color:\n    tokens-mat-datepicker.private-get-default-overlap-selected-color($overlap-color)) {\n  $tokens: tokens-mat-datepicker.get-range-color-tokens(\n    $range-color: $range-color,\n    $comparison-color: $comparison-color,\n    $overlap-color: $overlap-color,\n    $overlap-selected-color: $overlap-selected-color,\n  );\n\n  @include sass-utils.current-selector-or-root() {\n    @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $tokens);\n  }\n}\n\n/// Outputs density theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    // TODO(crisbeto): move this into the structural styles\n    // once the icon button density is switched to tokens.\n\n    // Regardless of the user-passed density, we want the calendar\n    // previous/next buttons to remain at density -2\n    .mat-calendar-controls {\n      @include icon-button-theme.density(-2);\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-datepicker.$prefix, tokens: tokens-mat-datepicker.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-datepicker.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the main selection: primary, secondary, tertiary,\n///      or error (If not specified, default primary color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-datepicker') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-datepicker-tokens:\n      token-utils.get-tokens-for($tokens, tokens-mat-datepicker.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-datepicker.$prefix, $mat-datepicker-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/tokens/m2/mat/icon' as tokens-mat-icon;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-colors($theme, $palette-name) {\n  $color: inspection.get-theme-color($theme, $palette-name, text);\n  $tokens: tokens-mat-icon.private-get-icon-color-tokens($color);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $tokens);\n}\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for the mat-icon.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: primary, secondary, tertiary, or error\n///     (If not specified, default neutral color will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-icon.$prefix,\n        tokens-mat-icon.get-color-tokens($theme));\n    }\n\n    .mat-icon {\n      &.mat-primary {\n        @include _palette-colors($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-colors($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-colors($theme, warn);\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {}\n}\n\n/// Outputs density theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {}\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-icon.$prefix, tokens: tokens-mat-icon.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for the mat-icon.\n/// @param {Map} $theme The theme to generate styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the icon: surface, primary, secondary, tertiary,\n///     or error (If not specified, default surface color will be used).\n@mixin theme($theme, $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-icon') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  $mat-icon-tokens: token-utils.get-tokens-for($tokens, tokens-mat-icon.$prefix, $options...);\n  @include token-utils.create-token-values(tokens-mat-icon.$prefix, $mat-icon-tokens);\n}\n", "@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/style/sass-utils';\n@use '../core/tokens/token-utils';\n@use '../core/tokens/m2/mat/stepper' as tokens-mat-stepper;\n\n/// Outputs base theme styles (styles not dependent on the color, typography, or density settings)\n/// for mat-stepper.\n/// @param {Map} $theme The theme to generate base styles for.\n@mixin base($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, base));\n  }\n  @else {}\n}\n\n/// Outputs color theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin color($theme, $options...) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color), $options...);\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-color-tokens($theme));\n\n      .mat-step-header.mat-accent {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, accent));\n      }\n\n      .mat-step-header.mat-warn {\n        @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n          tokens-mat-stepper.private-get-color-palette-color-tokens($theme, warn));\n      }\n    }\n  }\n}\n\n/// Outputs typography theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate typography styles for.\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-typography-tokens($theme));\n    }\n  }\n}\n\n/// Outputs density theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate density styles for.\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-stepper.$prefix,\n        tokens-mat-stepper.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-stepper.$prefix, tokens: tokens-mat-stepper.get-token-slots()),\n  );\n}\n\n/// Outputs all (base, color, typography, and density) theme styles for mat-stepper.\n/// @param {Map} $theme The theme to generate color styles for.\n/// @param {ArgList} Additional optional arguments (only supported for M3 themes):\n///   $color-variant: The color variant to use for the stepper: primary, secondary,\n///   tertiary, or error (If not specified, primary color values will be used).\n@mixin theme($theme,  $options...) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-stepper') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme), $options...);\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens, $options...) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    $mat-stepper-tokens: token-utils.get-tokens-for(\n      $tokens,\n      tokens-mat-stepper.$prefix,\n      $options...\n    );\n    @include token-utils.create-token-values(\n        tokens-mat-stepper.$prefix, $mat-stepper-tokens);\n  }\n}\n", "@use 'sass:map';\n@use '../core/theming/theming';\n@use '../core/theming/inspection';\n@use '../core/theming/validation';\n@use '../core/typography/typography';\n@use '../core/tokens/m2/mat/toolbar' as tokens-mat-toolbar;\n@use '../core/tokens/token-utils';\n@use '../core/style/sass-utils';\n\n@mixin _palette-styles($theme, $palette-name) {\n  @include token-utils.create-token-values(\n    tokens-mat-toolbar.$prefix,\n    tokens-mat-toolbar.private-get-color-palette-color-tokens(\n      $background-color: inspection.get-theme-color($theme, $palette-name),\n      $text-color: inspection.get-theme-color($theme, $palette-name, default-contrast)\n    )\n  );\n}\n\n@mixin base($theme) {}\n\n@mixin color($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, color));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-color-tokens($theme));\n    }\n\n    .mat-toolbar {\n      &.mat-primary {\n        @include _palette-styles($theme, primary);\n      }\n\n      &.mat-accent {\n        @include _palette-styles($theme, accent);\n      }\n\n      &.mat-warn {\n        @include _palette-styles($theme, warn);\n      }\n    }\n  }\n}\n\n@mixin typography($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, typography));\n  }\n  @else {\n    // TODO(mmalerba): Stop calling this and resolve resulting screen diffs.\n    $theme: inspection.private-get-typography-back-compat-theme($theme);\n\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-typography-tokens($theme));\n    }\n  }\n}\n\n@mixin density($theme) {\n  @if inspection.get-theme-version($theme) == 1 {\n    @include _theme-from-tokens(inspection.get-theme-tokens($theme, density));\n  }\n  @else {\n    @include sass-utils.current-selector-or-root() {\n      @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n        tokens-mat-toolbar.get-density-tokens($theme));\n    }\n  }\n}\n\n/// Outputs the CSS variable values for the given tokens.\n/// @param {Map} $tokens The token values to emit.\n@mixin overrides($tokens: ()) {\n  @include token-utils.batch-create-token-values(\n    $tokens,\n    (prefix: tokens-mat-toolbar.$prefix, tokens: tokens-mat-toolbar.get-token-slots()),\n  );\n}\n\n@mixin theme($theme) {\n  @include theming.private-check-duplicate-theme-styles($theme, 'mat-toolbar') {\n    @if inspection.get-theme-version($theme) == 1 {\n      @include _theme-from-tokens(inspection.get-theme-tokens($theme));\n    }\n    @else {\n      @include base($theme);\n      @if inspection.theme-has($theme, color) {\n        @include color($theme);\n      }\n      @if inspection.theme-has($theme, density) {\n        @include density($theme);\n      }\n      @if inspection.theme-has($theme, typography) {\n        @include typography($theme);\n      }\n    }\n  }\n}\n\n@mixin _theme-from-tokens($tokens) {\n  @include validation.selector-defined(\n      'Calls to Angular Material theme mixins with an M3 theme must be wrapped in a selector');\n  @if ($tokens != ()) {\n    @include token-utils.create-token-values(tokens-mat-toolbar.$prefix,\n      map.get($tokens, tokens-mat-toolbar.$prefix));\n  }\n}\n", "//////////////////////\n// Cores Principais //\n//////////////////////\n\n$primary: #ffc200;\n$secondary: #00f0c0;\n$tertiary: #f1433c;\n$quaternary: #45beff;\n\n/////////////////////\n// Cores de Textos //\n/////////////////////\n\n$foreground-100: #fff;\n$foreground-200: #cdcdcd;\n$foreground-300: #cdcdcd;\n\n////////////////////\n// Cores de Fundo //\n////////////////////\n\n$background-100: #121e24;\n$background-200: #263238;\n$background-300: #445056;\n\n///////////\n// Fonte //\n///////////\n\n$font: \"Lato\", sans-serif;\n\n// body\n$body-bg: $background-100;\n$body-color: $foreground-100;\n\n// tabs\n$tab-bg: $background-300;\n$tab-color: $foreground-300;\n$tab-active-bg: $background-200;\n$tab-active-color: $foreground-200;\n"],
  "mappings": "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A,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,iBAAA,CAAA,0BAAA,CAAA,iBCyEJ,WAAA,IAAA,kCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MDzEI,CAAA,kBAAA,CAAA,0BAAA,CAAA,kBCyEJ,WAAA,IAAA,mCAAA,EAAA,MCjFE,CAAA,wBACE,QAAA,KCJJ,KFgII,oBAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IEhIJ,KFgII,8CAAA,QAAA,+BAAA,MAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,yCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KGtHJ,CAAA,WHsHI,8CAAA,QAAA,+BAAA,MAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,yCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KGjHJ,CAAA,SHiHI,8CAAA,QAAA,+BAAA,MAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,sCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,yCAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KEhIJ,KFgII,iCAAA,MI7FJ,CAAA,YJ6FI,gDAAA,QAAA,qDAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,8DAAA,QAAA,2DAAA,QAAA,yDAAA,QAAA,wDAAA,QAAA,iEAAA,QEhIJ,KE6CA,CDnCA,WHsHI,gDAAA,QAAA,qDAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,8DAAA,QAAA,2DAAA,QAAA,yDAAA,QAAA,wDAAA,QAAA,iEAAA,QI/EJ,CDlCA,SHiHI,gDAAA,QAAA,qDAAA,QAAA,kDAAA,KAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,8DAAA,QAAA,2DAAA,QAAA,yDAAA,QAAA,wDAAA,QAAA,iEAAA,QEhIJ,KFgII,4BAAA,QAAA,sBAAA,MAAA,oCAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,oCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,IAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,IAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,qCAAA,IAAA,KAAA,KAAA,KAAA,KAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,KAAA,KAAA,IAAA,KAAA,CAAA,EAAA,CAAA,EA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",
  "names": []
}
